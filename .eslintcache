[{"/home/tringuyen/go/src/ourdemy_frontend/src/reportWebVitals.js":"1","/home/tringuyen/go/src/ourdemy_frontend/src/components/CCarousel.js":"2","/home/tringuyen/go/src/ourdemy_frontend/src/components/UpdatePassword.js":"3","/home/tringuyen/go/src/ourdemy_frontend/src/components/SignUpDialog.js":"4","/home/tringuyen/go/src/ourdemy_frontend/src/components/PageFrame.js":"5","/home/tringuyen/go/src/ourdemy_frontend/src/App.js":"6","/home/tringuyen/go/src/ourdemy_frontend/src/pages/NotFound.js":"7","/home/tringuyen/go/src/ourdemy_frontend/src/pages/home.js":"8","/home/tringuyen/go/src/ourdemy_frontend/src/components/ComplexCard.js":"9","/home/tringuyen/go/src/ourdemy_frontend/src/components/SignInDialog.js":"10","/home/tringuyen/go/src/ourdemy_frontend/src/pages/ViewVideo.js":"11","/home/tringuyen/go/src/ourdemy_frontend/src/index.js":"12","/home/tringuyen/go/src/ourdemy_frontend/src/components/LecturerRoute.js":"13","/home/tringuyen/go/src/ourdemy_frontend/src/components/AuthRoute.js":"14","/home/tringuyen/go/src/ourdemy_frontend/src/components/YesNoDialog.js":"15","/home/tringuyen/go/src/ourdemy_frontend/src/pages/Admin.js":"16"},{"size":409,"mtime":1609733571593,"results":"17","hashOfConfig":"18"},{"size":1494,"mtime":1609733571589,"results":"19","hashOfConfig":"18"},{"size":5876,"mtime":1609733571593,"results":"20","hashOfConfig":"18"},{"size":9449,"mtime":1609733571593,"results":"21","hashOfConfig":"18"},{"size":9196,"mtime":1609736337810,"results":"22","hashOfConfig":"18"},{"size":1471,"mtime":1609845009058,"results":"23","hashOfConfig":"18"},{"size":1420,"mtime":1609733571593,"results":"24","hashOfConfig":"18"},{"size":1953,"mtime":1609733571593,"results":"25","hashOfConfig":"18"},{"size":2546,"mtime":1609733571589,"results":"26","hashOfConfig":"18"},{"size":4034,"mtime":1609733571593,"results":"27","hashOfConfig":"18"},{"size":5424,"mtime":1609906138838,"results":"28","hashOfConfig":"18"},{"size":601,"mtime":1609733571593,"results":"29","hashOfConfig":"18"},{"size":599,"mtime":1609733571589,"results":"30","hashOfConfig":"18"},{"size":543,"mtime":1609733571589,"results":"31","hashOfConfig":"18"},{"size":1381,"mtime":1609733571593,"results":"32","hashOfConfig":"18"},{"size":23287,"mtime":1609921475638,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m03r64",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/tringuyen/go/src/ourdemy_frontend/src/reportWebVitals.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/components/CCarousel.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/components/UpdatePassword.js",["74","75","76"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup, updatePassword} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst UpdatePasswordDialog = ({open, onClose, err, loading, finish}) => {\n    const classes = useStyles();\n\n    const opassRef = useRef(\"\");\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const cleanState = () => {\n        store.dispatch(authenSlice.actions.resetPasswordUpdateState())\n        onClose()\n    }\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Update password finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <DialogContentText>\n                                Update password successfully\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={() => cleanState()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> :\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Update Password\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Old password\"\n                                type=\"password\"\n                                inputRef={opassRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"npassword\"\n                                label=\"New password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => cleanState()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            updatePassword({\n                                                \"oldPassword\": opassRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Update Password\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nUpdatePasswordDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.passwordErr,\n    loading: state.authen.updatingPassword,\n    finish: state.authen.updatingPasswordFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(UpdatePasswordDialog)",["77","78"],"/home/tringuyen/go/src/ourdemy_frontend/src/components/SignUpDialog.js",["79"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\n    const classes = useStyles();\n    const nameRef = useRef(\"\")\n    const unameRef = useRef(\"\")\n    const emailRef = useRef(\"\")\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const otpunameRef = useRef(\"\")\n    const otpRef = useRef(\"\")\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogActions>\n                            <Button onClick={() => onClose()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> : !otp ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Full name\"\n                                type=\"text\"\n                                inputRef={nameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={unameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"email\"\n                                label=\"Email\"\n                                type=\"email\"\n                                inputRef={emailRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\n                                    Otp\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            signup({\n                                                \"name\": nameRef.current.value,\n                                                \"username\": unameRef.current.value,\n                                                \"email\": emailRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Sign up\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    OTP\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={otpunameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"otp\"\n                                type=\"text\"\n                                inputRef={otpRef}\n                                fullWidth\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            {!otploading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\n                                        color=\"primary\">\n                                    Switch to Sign up\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            otpConfirm({\n                                                \"username\": otpunameRef.current.value,\n                                                \"otp\": otpRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Confirm\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nSignUpDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    otp: false,\n    otploading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signUpErr,\n    loading: state.authen.signingUp,\n    otp: state.authen.shouldOtp,\n    otploading: state.authen.otping,\n    finish: state.authen.signingUpFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignUpDialog)","/home/tringuyen/go/src/ourdemy_frontend/src/components/PageFrame.js",["80"],"import React, {useState} from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport {fade, makeStyles} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport Collapse from '@material-ui/core/Collapse'\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconExpandLess from '@material-ui/icons/ExpandLess'\nimport IconExpandMore from '@material-ui/icons/ExpandMore'\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {authenSlice, signin, signout} from \"../store/authen\";\nimport store from \"../store\";\nimport {connect} from \"react-redux\";\nimport SignUpDialog from \"./SignUpDialog\";\nimport SignInDialog from \"./SignInDialog\";\nimport {Menu, MenuItem} from \"@material-ui/core\";\nimport {AccountCircle} from \"@material-ui/icons\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        zIndex: 2,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        zIndex: 1,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        marginTop: '70px',\n        display: 'flex'\n    },\n    pageContent: {\n        //flexGrow: 1,\n        width:`calc(100vw - ${drawerWidth}px - 20px )`,\n        padding: '20px'\n    },\n    btn: {\n        marginLeft: '10px',\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n}));\n\n\nconst PageFrame = ({token, categories, children}) => {\n    const classes = useStyles();\n    const isOpenArray = categories.map((cat, index) => {\n        return false\n    })\n\n    const [itemOpen, setItemOpen] = useState(isOpenArray);\n    const [signUpDialogOpen, setSignUpDialogOpen] = useState(false);\n    const [signInDialogOpen, setSignInDialogOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const history = useHistory();\n\n    const toggleItem = (index, open) => {\n        const itemOpenCopy = [...itemOpen]\n        itemOpenCopy[index] = open\n        setItemOpen(itemOpenCopy)\n    }\n\n    const closeMenu = () => {\n        setAnchorEl(null)\n    }\n\n    const closeAndNav = (path) => {\n        setAnchorEl(null)\n        history.push(`/${path}`)\n    }\n\n    const navCat = (path) => {\n        history.push(`/cat/${path}`)\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography onClick={() => history.push(\"/\")} className={classes.title} variant=\"h4\" noWrap>\n                        Ourdemy\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon/>\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{'aria-label': 'search'}}\n                        />\n                    </div>\n                    {!token ? <div>\n                        <Button className={classes.btn}\n                                onClick={() => setSignInDialogOpen(true)}\n                                color=\"inherit\">Log In</Button>\n                        <Button className={classes.btn}\n                                color=\"inherit\" onClick={() => setSignUpDialogOpen(true)}>Sign Up</Button>\n                    </div> : <div>\n                        <IconButton className={classes.btn} aria-controls=\"simple-menu\" aria-haspopup=\"true\"\n                                    color=\"inherit\" onClick={(e) => setAnchorEl(e.currentTarget)}>\n                            <AccountCircle/>\n                        </IconButton>\n                    </div>}\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"left\"\n            >\n                <div className={classes.toolbar}/>\n                <Divider/>\n                <List>\n                    {categories.map((cat, index) => (\n                        <div key={cat.cid}>\n                            <ListItem button>\n                                <ListItemText primary={cat.cat_name} onClick={() => navCat(cat.cat_name)}/>\n                                <div role=\"button\" onClick={(e) => toggleItem(index, !itemOpen[index])}>\n                                    {itemOpen[index] ? <IconExpandLess/> :\n                                        <IconExpandMore/>}\n                                </div>\n                            </ListItem>\n                            {\n                                cat.subcats ?\n                                    <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\n                                        <Divider/>\n                                        <List component=\"div\" disablePadding>\n                                            {cat.subcats.map((sub, index) => (\n                                                <ListItem button key={sub.scid}>\n                                                    <ListItemText inset\n                                                                  onClick={() => navCat(`${cat.cat_name}/${sub.subcat_name}`)}\n                                                                  primary={sub.subcat_name}/>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Collapse>\n                                    : null\n                            }\n                        </div>\n                    ))}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.pageContent}>\n                    {children}\n                </div>\n            </main>\n            <SignUpDialog open={signUpDialogOpen} onClose={() => {\n                setSignUpDialogOpen(false)\n                store.dispatch(authenSlice.actions.resetSignUpState())\n            }}/>\n            <SignInDialog open={signInDialogOpen} onClose={() => {\n                setSignInDialogOpen(false)\n                store.dispatch(authenSlice.actions.resetSignInState())\n            }}/>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n            >\n                <MenuItem onClick={() => closeAndNav('profile')}>Profile</MenuItem>\n                <MenuItem onClick={() => {\n                    closeMenu()\n                    store.dispatch(signout())\n                }}>Logout</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    token: state.authen.token,\n    categories: state.cat.category\n})\n\nexport default connect(\n    mapStateToProps\n)(PageFrame);",["81","82"],"/home/tringuyen/go/src/ourdemy_frontend/src/App.js",["83"],"/home/tringuyen/go/src/ourdemy_frontend/src/pages/NotFound.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/pages/home.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/components/ComplexCard.js",["84","85","86","87"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 350,\n    minWidth: 250,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nexport default function ComplexCard(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={props.className}>\n      <Paper elevation={2}>\n        <Card className={classes.root}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {props.avatar ?? \"R\"}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\">\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={props.title ?? \"The Course Name\"}\n          />\n          <CardMedia\n            className={classes.media}\n            image={props.imagesrc ?? \"https://picsum.photos/300/300\"}\n            title={props.title}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {props.detail ?? \"Brief Details.\"}\n            </Typography>\n          </CardContent>\n          <CardActions disableSpacing>\n            <IconButton aria-label=\"add to favorites\">\n              <FavoriteIcon />\n            </IconButton>\n          </CardActions>\n        </Card>\n      </Paper>\n    </div>\n  );\n}\n",["88","89"],"/home/tringuyen/go/src/ourdemy_frontend/src/components/SignInDialog.js",["90"],"/home/tringuyen/go/src/ourdemy_frontend/src/pages/ViewVideo.js",["91"],"/home/tringuyen/go/src/ourdemy_frontend/src/index.js",["92"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {fetchCategories} from \"./store/category\";\nimport store from \"./store\";\n\nrequire('dotenv').config()\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\nstore.dispatch(fetchCategories())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","/home/tringuyen/go/src/ourdemy_frontend/src/components/LecturerRoute.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/components/AuthRoute.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/components/YesNoDialog.js",[],"/home/tringuyen/go/src/ourdemy_frontend/src/pages/Admin.js",["93","94","95","96"],{"ruleId":"97","severity":1,"message":"98","line":8,"column":8,"nodeType":"99","messageId":"100","endLine":8,"endColumn":19},{"ruleId":"97","severity":1,"message":"101","line":13,"column":22,"nodeType":"99","messageId":"100","endLine":13,"endColumn":32},{"ruleId":"97","severity":1,"message":"102","line":13,"column":34,"nodeType":"99","messageId":"100","endLine":13,"endColumn":40},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"97","severity":1,"message":"98","line":8,"column":8,"nodeType":"99","messageId":"100","endLine":8,"endColumn":19},{"ruleId":"97","severity":1,"message":"107","line":21,"column":22,"nodeType":"99","messageId":"100","endLine":21,"endColumn":28},{"ruleId":"103","replacedBy":"108"},{"ruleId":"105","replacedBy":"109"},{"ruleId":"97","severity":1,"message":"110","line":6,"column":5,"nodeType":"99","messageId":"100","endLine":6,"endColumn":9},{"ruleId":"97","severity":1,"message":"111","line":3,"column":8,"nodeType":"99","messageId":"100","endLine":3,"endColumn":12},{"ruleId":"97","severity":1,"message":"112","line":9,"column":8,"nodeType":"99","messageId":"100","endLine":9,"endColumn":16},{"ruleId":"97","severity":1,"message":"113","line":15,"column":8,"nodeType":"99","messageId":"100","endLine":15,"endColumn":17},{"ruleId":"97","severity":1,"message":"114","line":16,"column":8,"nodeType":"99","messageId":"100","endLine":16,"endColumn":22},{"ruleId":"103","replacedBy":"115"},{"ruleId":"105","replacedBy":"116"},{"ruleId":"97","severity":1,"message":"102","line":10,"column":30,"nodeType":"99","messageId":"100","endLine":10,"endColumn":36},{"ruleId":"97","severity":1,"message":"117","line":20,"column":11,"nodeType":"99","messageId":"100","endLine":20,"endColumn":18},{"ruleId":"97","severity":1,"message":"118","line":5,"column":8,"nodeType":"99","messageId":"100","endLine":5,"endColumn":23},{"ruleId":"97","severity":1,"message":"119","line":20,"column":8,"nodeType":"99","messageId":"100","endLine":20,"endColumn":12},{"ruleId":"97","severity":1,"message":"120","line":21,"column":8,"nodeType":"99","messageId":"100","endLine":21,"endColumn":14},{"ruleId":"97","severity":1,"message":"121","line":53,"column":14,"nodeType":"99","messageId":"100","endLine":53,"endColumn":27},{"ruleId":"97","severity":1,"message":"122","line":61,"column":14,"nodeType":"99","messageId":"100","endLine":61,"endColumn":30},"no-unused-vars","'DialogTitle' is defined but never used.","Identifier","unusedVar","'otpConfirm' is defined but never used.","'signup' is defined but never used.","no-native-reassign",["123"],"no-negated-in-lhs",["124"],"'signin' is defined but never used.",["123"],["124"],"'Link' is defined but never used.","'clsx' is defined but never used.","'Collapse' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.",["123"],["124"],"'classes' is assigned a value but never used.","'reportWebVitals' is defined but never used.","'List' is defined but never used.","'Button' is defined but never used.","'handleAddUser' is defined but never used.","'handleDeleteUser' is defined but never used.","no-global-assign","no-unsafe-negation"]