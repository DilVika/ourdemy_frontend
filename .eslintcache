[{"E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js":"1","E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js":"2","E:\\prj\\ourdemy_frontend\\src\\index.js":"3","E:\\prj\\ourdemy_frontend\\src\\components\\CCarousel.js":"4","E:\\prj\\ourdemy_frontend\\src\\components\\ComplexCard.js":"5","E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js":"6","E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js":"7","E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js":"8","E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js":"9","E:\\prj\\ourdemy_frontend\\src\\App.js":"10","E:\\prj\\ourdemy_frontend\\src\\components\\UpdatePassword.js":"11","E:\\prj\\ourdemy_frontend\\src\\pages\\CourseManage.js":"12","E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js":"13","E:\\prj\\ourdemy_frontend\\src\\components\\AuthRoute.js":"14","E:\\prj\\ourdemy_frontend\\src\\pages\\NotFound.js":"15","E:\\prj\\ourdemy_frontend\\src\\pages\\home.js":"16","E:\\prj\\ourdemy_frontend\\src\\components\\SignInDialog.js":"17","E:\\prj\\ourdemy_frontend\\src\\reportWebVitals.js":"18","E:\\prj\\ourdemy_frontend\\src\\pages\\CreateCourse.js":"19","E:\\prj\\ourdemy_frontend\\src\\store\\index.js":"20","E:\\prj\\ourdemy_frontend\\src\\pages\\UpdateCourse.js":"21","E:\\prj\\ourdemy_frontend\\src\\pages\\CourseContent.js":"22","E:\\prj\\ourdemy_frontend\\src\\components\\CreateChapterDialog.js":"23","E:\\prj\\ourdemy_frontend\\src\\store\\course\\lec\\index.js":"24","E:\\prj\\ourdemy_frontend\\src\\components\\UploadVideoDialog.js":"25"},{"size":999,"mtime":1609857651843,"results":"26","hashOfConfig":"27"},{"size":1431,"mtime":1609659037355,"results":"28","hashOfConfig":"27"},{"size":682,"mtime":1609681016746,"results":"29","hashOfConfig":"27"},{"size":1559,"mtime":1609673631331,"results":"30","hashOfConfig":"27"},{"size":2629,"mtime":1609673631331,"results":"31","hashOfConfig":"27"},{"size":13968,"mtime":1609677783070,"results":"32","hashOfConfig":"27"},{"size":9476,"mtime":1609742278293,"results":"33","hashOfConfig":"27"},{"size":10577,"mtime":1609681016742,"results":"34","hashOfConfig":"27"},{"size":649,"mtime":1609678610127,"results":"35","hashOfConfig":"27"},{"size":1829,"mtime":1609858878892,"results":"36","hashOfConfig":"27"},{"size":6020,"mtime":1609658009714,"results":"37","hashOfConfig":"27"},{"size":5841,"mtime":1609859883098,"results":"38","hashOfConfig":"27"},{"size":9668,"mtime":1609514024760,"results":"39","hashOfConfig":"27"},{"size":568,"mtime":1609569086390,"results":"40","hashOfConfig":"27"},{"size":1466,"mtime":1609567612844,"results":"41","hashOfConfig":"27"},{"size":2038,"mtime":1609673631332,"results":"42","hashOfConfig":"27"},{"size":4327,"mtime":1609819374160,"results":"43","hashOfConfig":"27"},{"size":424,"mtime":1609403933576,"results":"44","hashOfConfig":"27"},{"size":9185,"mtime":1609825274463,"results":"45","hashOfConfig":"27"},{"size":288,"mtime":1609480585970,"results":"46","hashOfConfig":"27"},{"size":8191,"mtime":1609828793154,"results":"47","hashOfConfig":"27"},{"size":7981,"mtime":1609862962285,"results":"48","hashOfConfig":"27"},{"size":1781,"mtime":1609856567818,"results":"49","hashOfConfig":"27"},{"size":3386,"mtime":1609862924624,"results":"50","hashOfConfig":"27"},{"size":4034,"mtime":1609864678087,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ej66oa",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"59"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js",["114"],"E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js",[],"E:\\prj\\ourdemy_frontend\\src\\index.js",["115","116","117"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {fetchCategories} from \"./store/category\";\nimport store from \"./store\";\nimport {initialState} from \"./store/authen\";\nimport jwtDecode from \"jwt-decode\";\n\nrequire('dotenv').config()\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\nstore.dispatch(fetchCategories())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["118","119"],"E:\\prj\\ourdemy_frontend\\src\\components\\CCarousel.js",[],["120","121"],"E:\\prj\\ourdemy_frontend\\src\\components\\ComplexCard.js",["122","123","124","125"],"E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js",["126","127","128","129","130"],"E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js",["131"],"import React, {useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {fade, makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport IconExpandLess from '@material-ui/icons/ExpandLess'\r\nimport IconExpandMore from '@material-ui/icons/ExpandMore'\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {authenSlice, signin, signout} from \"../store/authen\";\r\nimport store from \"../store\";\r\nimport {connect} from \"react-redux\";\r\nimport SignUpDialog from \"./SignUpDialog\";\r\nimport SignInDialog from \"./SignInDialog\";\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\nimport {AccountCircle} from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n    appBar: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        zIndex: 2,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        zIndex: 1,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        marginTop: '70px',\r\n        display: 'flex'\r\n    },\r\n    pageContent: {\r\n        //flexGrow: 1,\r\n        width: `calc(100vw - ${drawerWidth}px - 20px )`,\r\n        padding: '20px'\r\n    },\r\n    btn: {\r\n        marginLeft: '10px',\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n}));\r\n\r\n\r\nconst PageFrame = ({token, categories, children}) => {\r\n    const classes = useStyles();\r\n    const isOpenArray = categories.map((cat, index) => {\r\n        return false\r\n    })\r\n\r\n    const [itemOpen, setItemOpen] = useState(isOpenArray);\r\n    const [signUpDialogOpen, setSignUpDialogOpen] = useState(false);\r\n    const [signInDialogOpen, setSignInDialogOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    const toggleItem = (index, open) => {\r\n        const itemOpenCopy = [...itemOpen]\r\n        itemOpenCopy[index] = open\r\n        setItemOpen(itemOpenCopy)\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const closeAndNav = (path) => {\r\n        setAnchorEl(null)\r\n        history.push(`/${path}`)\r\n    }\r\n\r\n    const navCat = (path) => {\r\n        history.push(`/cat/${path}`)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography role={\"button   `1\"} onClick={() => history.push(\"/\")} className={classes.title} variant=\"h4\" noWrap>\r\n                        Ourdemy\r\n                    </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Search…\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{'aria-label': 'search'}}\r\n                        />\r\n                    </div>\r\n                    {!token ? <div>\r\n                        <Button className={classes.btn}\r\n                                onClick={() => setSignInDialogOpen(true)}\r\n                                color=\"inherit\">Log In</Button>\r\n                        <Button className={classes.btn}\r\n                                color=\"inherit\" onClick={() => setSignUpDialogOpen(true)}>Sign Up</Button>\r\n                    </div> : <div>\r\n                        <IconButton className={classes.btn} aria-controls=\"simple-menu\" aria-haspopup=\"true\"\r\n                                    color=\"inherit\" onClick={(e) => setAnchorEl(e.currentTarget)}>\r\n                            <AccountCircle/>\r\n                        </IconButton>\r\n                    </div>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n                anchor=\"left\"\r\n            >\r\n                <div className={classes.toolbar}/>\r\n                <Divider/>\r\n                <List>\r\n                    {categories.map((cat, index) => (\r\n                        <div key={cat.cid}>\r\n                            <ListItem button>\r\n                                <ListItemText primary={cat.cat_name} onClick={() => navCat(cat.cat_name)}/>\r\n                                <div role=\"button\" onClick={(e) => toggleItem(index, !itemOpen[index])}>\r\n                                    {itemOpen[index] ? <IconExpandLess/> :\r\n                                        <IconExpandMore/>}\r\n                                </div>\r\n                            </ListItem>\r\n                            {\r\n                                cat.subcats ?\r\n                                    <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\r\n                                        <Divider/>\r\n                                        <List component=\"div\" disablePadding>\r\n                                            {cat.subcats.map((sub, index) => (\r\n                                                <ListItem button key={sub.scid}>\r\n                                                    <ListItemText inset\r\n                                                                  onClick={() => navCat(`${cat.cat_name}/${sub.subcat_name}`)}\r\n                                                                  primary={sub.subcat_name}/>\r\n                                                </ListItem>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Collapse>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.pageContent}>\r\n                    {children}\r\n                </div>\r\n            </main>\r\n            <SignUpDialog open={signUpDialogOpen} onClose={() => {\r\n                setSignUpDialogOpen(false)\r\n                store.dispatch(authenSlice.actions.resetSignUpState())\r\n            }}/>\r\n            <SignInDialog open={signInDialogOpen} onClose={() => {\r\n                setSignInDialogOpen(false)\r\n                store.dispatch(authenSlice.actions.resetSignInState())\r\n            }}/>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}\r\n            >\r\n                <MenuItem onClick={() => closeAndNav('profile')}>Profile</MenuItem>\r\n                <MenuItem onClick={() => {\r\n                    closeMenu()\r\n                    store.dispatch(signout())\r\n                }}>Logout</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    token: state.authen.token,\r\n    categories: state.cat.category\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PageFrame);","E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js",[],"E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js",[],["132","133"],"E:\\prj\\ourdemy_frontend\\src\\App.js",["134","135","136"],"E:\\prj\\ourdemy_frontend\\src\\components\\UpdatePassword.js",["137","138","139"],"import React, {useRef} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport store from \"../store\";\r\nimport {authenSlice, otpConfirm, signup, updatePassword} from \"../store/authen\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst UpdatePasswordDialog = ({open, onClose, err, loading, finish}) => {\r\n    const classes = useStyles();\r\n\r\n    const opassRef = useRef(\"\");\r\n    const passRef = useRef(\"\")\r\n    const rpassRef = useRef(\"\")\r\n\r\n    const cleanState = () => {\r\n        store.dispatch(authenSlice.actions.resetPasswordUpdateState())\r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                finish ?\r\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Update password finished\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <DialogContentText>\r\n                                Update password successfully\r\n                            </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            <Button onClick={() => cleanState()} color=\"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> :\r\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Update Password\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"password\"\r\n                                label=\"Old password\"\r\n                                type=\"password\"\r\n                                inputRef={opassRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"npassword\"\r\n                                label=\"New password\"\r\n                                type=\"password\"\r\n                                inputRef={passRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"rpassword\"\r\n                                label=\"Repeat Password\"\r\n                                type=\"password\"\r\n                                inputRef={rpassRef}\r\n                                fullWidth\r\n                            />\r\n                            {err ? <DialogContentText>\r\n                                <Typography color='error' component={'span'}>\r\n                                    {err}\r\n                                </Typography>\r\n                            </DialogContentText> : null}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {!loading ? <div>\r\n                                <Button onClick={() => cleanState()} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={\r\n                                        () => store.dispatch(\r\n                                            updatePassword({\r\n                                                \"oldPassword\": opassRef.current.value,\r\n                                                \"password\": passRef.current.value,\r\n                                                \"repeatPassword\": rpassRef.current.value,\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                    color=\"primary\">\r\n                                    Update Password\r\n                                </Button>\r\n                            </div> : <div>\r\n                                <CircularProgress/>\r\n                            </div>}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nUpdatePasswordDialog.defaultProps = {\r\n    open: false,\r\n    err: null,\r\n    loading: false,\r\n    finish: false\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    err: state.authen.passwordErr,\r\n    loading: state.authen.updatingPassword,\r\n    finish: state.authen.updatingPasswordFinish,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(UpdatePasswordDialog)",["140","141"],"E:\\prj\\ourdemy_frontend\\src\\pages\\CourseManage.js",["142","143","144","145","146","147"],"E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js",["148"],"import React, {useRef} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport store from \"../store\";\r\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\r\n    const classes = useStyles();\r\n    const nameRef = useRef(\"\")\r\n    const unameRef = useRef(\"\")\r\n    const emailRef = useRef(\"\")\r\n    const passRef = useRef(\"\")\r\n    const rpassRef = useRef(\"\")\r\n\r\n    const otpunameRef = useRef(\"\")\r\n    const otpRef = useRef(\"\")\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                finish ?\r\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Sign up finished\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogActions>\r\n                            <Button onClick={() => onClose()} color=\"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> : !otp ?\r\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Sign up\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Full name\"\r\n                                type=\"text\"\r\n                                inputRef={nameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"username\"\r\n                                type=\"text\"\r\n                                inputRef={unameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                type=\"email\"\r\n                                inputRef={emailRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                inputRef={passRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"rpassword\"\r\n                                label=\"Repeat Password\"\r\n                                type=\"password\"\r\n                                inputRef={rpassRef}\r\n                                fullWidth\r\n                            />\r\n                            {err ? <DialogContentText>\r\n                                <Typography color='error' component={'span'}>\r\n                                    {err}\r\n                                </Typography>\r\n                            </DialogContentText> : null}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {!loading ? <div>\r\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\r\n                                    Otp\r\n                                </Button>\r\n                                <Button onClick={() => onClose()} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={\r\n                                        () => store.dispatch(\r\n                                            signup({\r\n                                                \"name\": nameRef.current.value,\r\n                                                \"username\": unameRef.current.value,\r\n                                                \"email\": emailRef.current.value,\r\n                                                \"password\": passRef.current.value,\r\n                                                \"repeatPassword\": rpassRef.current.value,\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                    color=\"primary\">\r\n                                    Sign up\r\n                                </Button>\r\n                            </div> : <div>\r\n                                <CircularProgress/>\r\n                            </div>}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    OTP\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"username\"\r\n                                type=\"text\"\r\n                                inputRef={otpunameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"otp\"\r\n                                type=\"text\"\r\n                                inputRef={otpRef}\r\n                                fullWidth\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {!otploading ? <div>\r\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\r\n                                        color=\"primary\">\r\n                                    Switch to Sign up\r\n                                </Button>\r\n                                <Button onClick={() => onClose()} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={\r\n                                        () => store.dispatch(\r\n                                            otpConfirm({\r\n                                                \"username\": otpunameRef.current.value,\r\n                                                \"otp\": otpRef.current.value,\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                    color=\"primary\">\r\n                                    Confirm\r\n                                </Button>\r\n                            </div> : <div>\r\n                                <CircularProgress/>\r\n                            </div>}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nSignUpDialog.defaultProps = {\r\n    open: false,\r\n    err: null,\r\n    loading: false,\r\n    otp: false,\r\n    otploading: false,\r\n    finish: false\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    err: state.authen.signUpErr,\r\n    loading: state.authen.signingUp,\r\n    otp: state.authen.shouldOtp,\r\n    otploading: state.authen.otping,\r\n    finish: state.authen.signingUpFinish,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(SignUpDialog)","E:\\prj\\ourdemy_frontend\\src\\components\\AuthRoute.js",[],["149","150"],"E:\\prj\\ourdemy_frontend\\src\\pages\\NotFound.js",[],["151","152"],"E:\\prj\\ourdemy_frontend\\src\\pages\\home.js",[],"E:\\prj\\ourdemy_frontend\\src\\components\\SignInDialog.js",["153","154"],"import {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport store from \"../store\";\r\nimport {authenSlice, signin, signup} from \"../store/authen\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport React, {useRef} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst SignInDialog = ({open, onClose, err, loading, finish}) => {\r\n    const classes = useStyles();\r\n\r\n    const unameRef = useRef(\"\");\r\n    const passRef = useRef(\"\");\r\n\r\n    return (\r\n        finish ? <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Sign in finished\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <DialogActions>\r\n                    <Button onClick={() => onClose()} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> :\r\n            <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Sign In\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"username\"\r\n                        label=\"username\"\r\n                        type=\"text\"\r\n                        inputRef={unameRef}\r\n                        fullWidth\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        inputRef={passRef}\r\n                        fullWidth\r\n                    />\r\n                    {err ? <DialogContentText>\r\n                        <Typography color='error' component={'span'}>\r\n                            {err}\r\n                        </Typography>\r\n                    </DialogContentText> : null}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {!loading ? <div>\r\n                        <Button onClick={() => {\r\n                        }} color=\"secondary\">\r\n                            Reset Password\r\n                        </Button>\r\n                        <Button onClick={() => onClose()} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            onClick={\r\n                                () => store.dispatch(\r\n                                    signin({\r\n                                        \"username\": unameRef.current.value,\r\n                                        \"password\": passRef.current.value,\r\n                                    })\r\n                                )\r\n                            }\r\n                            color=\"primary\">\r\n                            Sign In\r\n                        </Button>\r\n                    </div> : <div>\r\n                        <CircularProgress/>\r\n                    </div>}\r\n                </DialogActions>\r\n            </Dialog>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    err: state.authen.signInErr,\r\n    loading: state.authen.signingIn,\r\n    finish: state.authen.signingInFinish,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(SignInDialog)","E:\\prj\\ourdemy_frontend\\src\\reportWebVitals.js",[],"E:\\prj\\ourdemy_frontend\\src\\pages\\CreateCourse.js",["155","156"],"import React, {useRef, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PageFrame from \"../components/PageFrame\";\r\nimport {Button, Divider, Grid, InputLabel, MenuItem, Select, TextField, Typography} from \"@material-ui/core\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport ImageUploader from 'react-images-upload';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    buttonBar: {\r\n        display: 'flex',\r\n        justifyContent: 'start',\r\n    },\r\n    main: {\r\n        width: '99%',\r\n    },\r\n    loadingCenter: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}))\r\n\r\nconst quillModules = {\r\n    toolbar: [\r\n        [{'header': '1'}, {'header': '2'}, {'font': []}],\r\n        [{size: []}],\r\n        ['bold', 'italic', 'underline', 'strike', 'blockquote'],\r\n        [{'list': 'ordered'}, {'list': 'bullet'},\r\n            {'indent': '-1'}, {'indent': '+1'}],\r\n        ['link'],\r\n    ],\r\n    clipboard: {\r\n        // toggle to add extra line breaks when pasting HTML:\r\n        matchVisual: false,\r\n    }\r\n}\r\n/*\r\n * Quill editor formats\r\n * See https://quilljs.com/docs/formats/\r\n */\r\nconst quillFormats = [\r\n    'header', 'font', 'size',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link'\r\n]\r\n\r\n\r\nconst CreateCourse = ({cats, err}) => {\r\n    const classes = useStyles()\r\n\r\n    const titleRef = useRef(\"\")\r\n    const shortDescRef = useRef(\"\");\r\n    const priceRef = useRef(\"\")\r\n    const [category, setCategory] = useState(\"\");\r\n    const [fullDesc, setFullDesc] = useState(\"\");\r\n    const [ava, setAva] = useState(null);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <PageFrame>\r\n                <div className={classes.main}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Typography variant={\"h6\"} color={\"primary\"}>\r\n                                Create course\r\n                            </Typography>\r\n                            <Divider/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        margin={\"dense\"}\r\n                                        id={\"title\"}\r\n                                        label={\"Title\"}\r\n                                        type={\"text\"}\r\n                                        inputRef={titleRef}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <InputLabel id={\"category-select-label\"}>\r\n                                        Category\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        labelId={\"category-select-label\"}\r\n                                        id={\"category-select\"}\r\n                                        value={category}\r\n                                        native\r\n                                        onChange={(e) => setCategory(e.target.value)}\r\n                                    >\r\n                                        {/*<option id={\"none-option\"} aria-label=\"None\" value=\"\"/>*/}\r\n                                        {\r\n                                            cats.map((cat) => (\r\n                                                <optgroup id={cat.cid} label={cat.cat_name}>\r\n                                                    {\r\n                                                        cat.subcats.map((subcat) => (\r\n                                                            <option id={subcat.scid} value={subcat.subcat_name}>\r\n                                                                {subcat.subcat_name}\r\n                                                            </option>\r\n                                                        ))\r\n                                                    }\r\n                                                </optgroup>\r\n                                            ))\r\n                                        }\r\n                                    </Select>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        margin={\"dense\"}\r\n                                        id={\"shortDesc\"}\r\n                                        label={\"Short Description\"}\r\n                                        type={\"text\"}\r\n                                        inputRef={shortDescRef}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        margin={\"dense\"}\r\n                                        id={\"price\"}\r\n                                        label={\"Price\"}\r\n                                        type={\"number\"}\r\n                                        inputRef={priceRef}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <ReactQuill\r\n                                        theme={\"snow\"}\r\n                                        style={{\r\n                                            height: \"20vh\",\r\n                                            width: \"40vw\"\r\n                                        }}\r\n                                        onChange={(html) => setFullDesc(html)}\r\n                                        value={fullDesc}\r\n                                        modules={quillModules}\r\n                                        formats={quillFormats}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    Course avatar\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <ImageUploader\r\n                                        withIcon\r\n                                        buttonText='Choose images'\r\n                                        withPreview\r\n                                        singleImage\r\n                                        onChange={(pic) => setAva(pic)}\r\n                                        imgExtension={['.jpg', '.png']}\r\n                                        maxFileSize={5242880}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12} style={{marginTop: \"48px\"}}>\r\n                            {err ? <>\r\n                                <Typography component={\"p\"} color={\"error\"} style={{marginBottom: '16px'}}>\r\n                                    {err}\r\n                                </Typography>\r\n                            </> : null}\r\n                            <div className={classes.buttonBar}>\r\n                                <Button variant={\"contained\"} color={\"primary\"}>\r\n                                    Submit\r\n                                </Button>\r\n                                <Button style={{marginLeft: '8px'}} variant={\"contained\"} color={\"secondary\"}>\r\n                                    Cancel\r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </PageFrame>\r\n        </div>\r\n    )\r\n}\r\n\r\nCreateCourse.defaultProps = {\r\n    \"cats\": [\r\n        {\r\n            \"cid\": \"c1\",\r\n            \"cat_name\": \"Games\",\r\n            \"subcats\": [\r\n                {\r\n                    \"scid\": \"sc01\",\r\n                    \"subcat_name\": \"Genshin\"\r\n                },\r\n                {\r\n                    \"scid\": \"sc02\",\r\n                    \"subcat_name\": \"TW3\"\r\n                },\r\n                {\r\n                    \"scid\": \"sc03\",\r\n                    \"subcat_name\": \"Kitty Cat\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"cid\": \"c2\",\r\n            \"cat_name\": \"IT\",\r\n            \"subcats\": [\r\n                {\r\n                    \"scid\": \"sc21\",\r\n                    \"subcat_name\": \"C++\"\r\n                },\r\n                {\r\n                    \"scid\": \"sc22\",\r\n                    \"subcat_name\": \"Python\"\r\n                },\r\n                {\r\n                    \"scid\": \"sc23\",\r\n                    \"subcat_name\": \"Kotlin\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n}\r\n\r\nexport default CreateCourse","E:\\prj\\ourdemy_frontend\\src\\store\\index.js",[],"E:\\prj\\ourdemy_frontend\\src\\pages\\UpdateCourse.js",[],"E:\\prj\\ourdemy_frontend\\src\\pages\\CourseContent.js",["157","158","159","160"],"E:\\prj\\ourdemy_frontend\\src\\components\\CreateChapterDialog.js",["161"],"E:\\prj\\ourdemy_frontend\\src\\store\\course\\lec\\index.js",["162"],"E:\\prj\\ourdemy_frontend\\src\\components\\UploadVideoDialog.js",["163"],{"ruleId":"164","severity":1,"message":"165","line":6,"column":9,"nodeType":"166","messageId":"167","endLine":6,"endColumn":15},{"ruleId":"164","severity":1,"message":"168","line":5,"column":8,"nodeType":"166","messageId":"167","endLine":5,"endColumn":23},{"ruleId":"164","severity":1,"message":"169","line":8,"column":9,"nodeType":"166","messageId":"167","endLine":8,"endColumn":21},{"ruleId":"164","severity":1,"message":"170","line":9,"column":8,"nodeType":"166","messageId":"167","endLine":9,"endColumn":17},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"171","replacedBy":"175"},{"ruleId":"173","replacedBy":"176"},{"ruleId":"164","severity":1,"message":"177","line":3,"column":8,"nodeType":"166","messageId":"167","endLine":3,"endColumn":12},{"ruleId":"164","severity":1,"message":"178","line":9,"column":8,"nodeType":"166","messageId":"167","endLine":9,"endColumn":16},{"ruleId":"164","severity":1,"message":"179","line":15,"column":8,"nodeType":"166","messageId":"167","endLine":15,"endColumn":17},{"ruleId":"164","severity":1,"message":"180","line":16,"column":8,"nodeType":"166","messageId":"167","endLine":16,"endColumn":22},{"ruleId":"164","severity":1,"message":"181","line":12,"column":12,"nodeType":"166","messageId":"167","endLine":12,"endColumn":20},{"ruleId":"164","severity":1,"message":"182","line":16,"column":9,"nodeType":"166","messageId":"167","endLine":16,"endColumn":14},{"ruleId":"164","severity":1,"message":"183","line":20,"column":9,"nodeType":"166","messageId":"167","endLine":20,"endColumn":21},{"ruleId":"164","severity":1,"message":"184","line":53,"column":12,"nodeType":"166","messageId":"167","endLine":53,"endColumn":24},{"ruleId":"164","severity":1,"message":"185","line":53,"column":26,"nodeType":"166","messageId":"167","endLine":53,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":21,"column":22,"nodeType":"166","messageId":"167","endLine":21,"endColumn":28},{"ruleId":"171","replacedBy":"186"},{"ruleId":"173","replacedBy":"187"},{"ruleId":"164","severity":1,"message":"188","line":6,"column":5,"nodeType":"166","messageId":"167","endLine":6,"endColumn":9},{"ruleId":"164","severity":1,"message":"189","line":7,"column":5,"nodeType":"166","messageId":"167","endLine":7,"endColumn":14},{"ruleId":"164","severity":1,"message":"190","line":22,"column":9,"nodeType":"166","messageId":"167","endLine":22,"endColumn":27},{"ruleId":"164","severity":1,"message":"191","line":8,"column":8,"nodeType":"166","messageId":"167","endLine":8,"endColumn":19},{"ruleId":"164","severity":1,"message":"192","line":13,"column":22,"nodeType":"166","messageId":"167","endLine":13,"endColumn":32},{"ruleId":"164","severity":1,"message":"193","line":13,"column":34,"nodeType":"166","messageId":"167","endLine":13,"endColumn":40},{"ruleId":"171","replacedBy":"194"},{"ruleId":"173","replacedBy":"195"},{"ruleId":"164","severity":1,"message":"196","line":4,"column":8,"nodeType":"166","messageId":"167","endLine":4,"endColumn":13},{"ruleId":"164","severity":1,"message":"197","line":8,"column":11,"nodeType":"166","messageId":"167","endLine":8,"endColumn":22},{"ruleId":"164","severity":1,"message":"198","line":11,"column":16,"nodeType":"166","messageId":"167","endLine":11,"endColumn":24},{"ruleId":"164","severity":1,"message":"199","line":13,"column":5,"nodeType":"166","messageId":"167","endLine":13,"endColumn":8},{"ruleId":"164","severity":1,"message":"200","line":16,"column":5,"nodeType":"166","messageId":"167","endLine":16,"endColumn":10},{"ruleId":"164","severity":1,"message":"201","line":19,"column":9,"nodeType":"166","messageId":"167","endLine":19,"endColumn":12},{"ruleId":"164","severity":1,"message":"191","line":8,"column":8,"nodeType":"166","messageId":"167","endLine":8,"endColumn":19},{"ruleId":"171","replacedBy":"202"},{"ruleId":"173","replacedBy":"203"},{"ruleId":"171","replacedBy":"204"},{"ruleId":"173","replacedBy":"205"},{"ruleId":"164","severity":1,"message":"206","line":10,"column":9,"nodeType":"166","messageId":"167","endLine":10,"endColumn":20},{"ruleId":"164","severity":1,"message":"193","line":10,"column":30,"nodeType":"166","messageId":"167","endLine":10,"endColumn":36},{"ruleId":"164","severity":1,"message":"207","line":4,"column":44,"nodeType":"166","messageId":"167","endLine":4,"endColumn":52},{"ruleId":"164","severity":1,"message":"208","line":61,"column":12,"nodeType":"166","messageId":"167","endLine":61,"endColumn":15},{"ruleId":"164","severity":1,"message":"209","line":8,"column":5,"nodeType":"166","messageId":"167","endLine":8,"endColumn":9},{"ruleId":"164","severity":1,"message":"210","line":12,"column":5,"nodeType":"166","messageId":"167","endLine":12,"endColumn":17},{"ruleId":"164","severity":1,"message":"211","line":23,"column":9,"nodeType":"166","messageId":"167","endLine":23,"endColumn":14},{"ruleId":"212","severity":1,"message":"213","line":49,"column":8,"nodeType":"214","endLine":49,"endColumn":10,"suggestions":"215"},{"ruleId":"164","severity":1,"message":"216","line":7,"column":5,"nodeType":"166","messageId":"167","endLine":7,"endColumn":22},{"ruleId":"164","severity":1,"message":"217","line":1,"column":8,"nodeType":"166","messageId":"167","endLine":1,"endColumn":13},{"ruleId":"164","severity":1,"message":"216","line":7,"column":5,"nodeType":"166","messageId":"167","endLine":7,"endColumn":22},"no-unused-vars","'signin' is defined but never used.","Identifier","unusedVar","'reportWebVitals' is defined but never used.","'initialState' is defined but never used.","'jwtDecode' is defined but never used.","no-native-reassign",["218"],"no-negated-in-lhs",["219"],["218"],["219"],"'clsx' is defined but never used.","'Collapse' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Snackbar' is defined but never used.","'Close' is defined but never used.","'fetchFavList' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'setSnackbarOpen' is assigned a value but never used.",["218"],["219"],"'Link' is defined but never used.","'useParams' is defined but never used.","'fetchCurrentCourse' is defined but never used.","'DialogTitle' is defined but never used.","'otpConfirm' is defined but never used.","'signup' is defined but never used.",["218"],["219"],"'store' is defined but never used.","'CardActions' is defined but never used.","'Checkbox' is defined but never used.","'Fab' is defined but never used.","'Paper' is defined but never used.","'Add' is defined but never used.",["218"],["219"],["218"],["219"],"'authenSlice' is defined but never used.","'MenuItem' is defined but never used.","'ava' is assigned a value but never used.","'Icon' is defined but never used.","'ListItemIcon' is defined but never used.","'Route' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["220"],"'DialogContentText' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"221","fix":"222"},"Update the dependencies array to be: [id]",{"range":"223","text":"224"},[1380,1382],"[id]"]