[{"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js":"1","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js":"2","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/AuthRoute.js":"3","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/authen/index.js":"4","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js":"5","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js":"6","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js":"7","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js":"8","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js":"9","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js":"10","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js":"11","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js":"12","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js":"13","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/index.js":"14","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/NotFound.js":"15","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PaperTest.js":"16","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js":"17"},{"size":601,"mtime":1609612032292,"results":"18","hashOfConfig":"19"},{"size":1003,"mtime":1609612032295,"results":"20","hashOfConfig":"19"},{"size":543,"mtime":1609612032290,"results":"21","hashOfConfig":"19"},{"size":5249,"mtime":1609612032294,"results":"22","hashOfConfig":"19"},{"size":1664,"mtime":1609663985130,"results":"23","hashOfConfig":"19"},{"size":8122,"mtime":1609664512132,"results":"24","hashOfConfig":"19"},{"size":9449,"mtime":1609612032291,"results":"25","hashOfConfig":"19"},{"size":2562,"mtime":1609663584444,"results":"26","hashOfConfig":"19"},{"size":1179,"mtime":1609662814164,"results":"27","hashOfConfig":"19"},{"size":599,"mtime":1609612032290,"results":"28","hashOfConfig":"19"},{"size":1399,"mtime":1609612032292,"results":"29","hashOfConfig":"19"},{"size":4034,"mtime":1609612032291,"results":"30","hashOfConfig":"19"},{"size":12719,"mtime":1609663584446,"results":"31","hashOfConfig":"19"},{"size":275,"mtime":1609612032295,"results":"32","hashOfConfig":"19"},{"size":1420,"mtime":1609612032293,"results":"33","hashOfConfig":"19"},{"size":542,"mtime":1609619573274,"results":"34","hashOfConfig":"19"},{"size":1122,"mtime":1609620683714,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"j4d77n",{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js",["79"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {fetchCategories} from \"./store/category\";\nimport store from \"./store\";\n\nrequire('dotenv').config()\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\nstore.dispatch(fetchCategories())\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["80","81"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js",["82","83"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/AuthRoute.js",[],["84","85"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/authen/index.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js",["86"],"import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconExpandLess from \"@material-ui/icons/ExpandLess\";\nimport IconExpandMore from \"@material-ui/icons/ExpandMore\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { authenSlice, signin, signout } from \"../store/authen\";\nimport store from \"../store\";\nimport { connect } from \"react-redux\";\nimport SignUpDialog from \"./SignUpDialog\";\nimport SignInDialog from \"./SignInDialog\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\nimport { AccountCircle } from \"@material-ui/icons\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(1),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      width: \"12ch\",\n      \"&:focus\": {\n        width: \"20ch\",\n      },\n    },\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    zIndex: 2,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    zIndex: 1,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    marginTop: \"70px\",\n    display: \"flex\",\n  },\n  pageContent: {\n    // flex: 1,\n    width: `calc(100vw - ${drawerWidth}px)`,\n  },\n  btn: {\n    marginLeft: \"10px\",\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n}));\n\nconst PageFrame = ({ token, categories, children }) => {\n  const classes = useStyles();\n  const isOpenArray = categories.map((cat, index) => {\n    return false;\n  });\n\n  const [itemOpen, setItemOpen] = useState(isOpenArray);\n  const [signUpDialogOpen, setSignUpDialogOpen] = useState(false);\n  const [signInDialogOpen, setSignInDialogOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const history = useHistory();\n\n  const toggleItem = (index, open) => {\n    const itemOpenCopy = [...itemOpen];\n    itemOpenCopy[index] = open;\n    setItemOpen(itemOpenCopy);\n  };\n\n  const closeMenu = () => {\n    setAnchorEl(null);\n  };\n\n  const closeAndNav = (path) => {\n    setAnchorEl(null);\n    history.push(`/${path}`);\n  };\n\n  const navCat = (path) => {\n    history.push(`/cat/${path}`);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h4\" noWrap>\n            Ourdemy\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </div>\n          {!token ? (\n            <div>\n              <Button\n                className={classes.btn}\n                onClick={() => setSignInDialogOpen(true)}\n                color=\"inherit\"\n              >\n                Log In\n              </Button>\n              <Button\n                className={classes.btn}\n                color=\"inherit\"\n                onClick={() => setSignUpDialogOpen(true)}\n              >\n                Sign Up\n              </Button>\n            </div>\n          ) : (\n            <div>\n              <IconButton\n                className={classes.btn}\n                aria-controls=\"simple-menu\"\n                aria-haspopup=\"true\"\n                color=\"inherit\"\n                onClick={(e) => setAnchorEl(e.currentTarget)}\n              >\n                <AccountCircle />\n              </IconButton>\n            </div>\n          )}\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <Divider />\n        <List>\n          {categories.map((cat, index) => (\n            <div key={cat.cid}>\n              <ListItem button>\n                <ListItemText\n                  primary={cat.cat_name}\n                  onClick={() => navCat(cat.cat_name)}\n                />\n                <div\n                  role=\"button\"\n                  onClick={(e) => toggleItem(index, !itemOpen[index])}\n                >\n                  {itemOpen[index] ? <IconExpandLess /> : <IconExpandMore />}\n                </div>\n              </ListItem>\n              {cat.subcats ? (\n                <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\n                  <Divider />\n                  <List component=\"div\" disablePadding>\n                    {cat.subcats.map((sub, index) => (\n                      <ListItem button key={sub.scid}>\n                        <ListItemText\n                          inset\n                          onClick={() =>\n                            navCat(`${cat.cat_name}/${sub.subcat_name}`)\n                          }\n                          primary={sub.subcat_name}\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                </Collapse>\n              ) : null}\n            </div>\n          ))}\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.pageContent}>{children}</div>\n      </main>\n      <SignUpDialog\n        open={signUpDialogOpen}\n        onClose={() => {\n          setSignUpDialogOpen(false);\n          store.dispatch(authenSlice.actions.resetSignUpState());\n        }}\n      />\n      <SignInDialog\n        open={signInDialogOpen}\n        onClose={() => {\n          setSignInDialogOpen(false);\n          store.dispatch(authenSlice.actions.resetSignInState());\n        }}\n      />\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={closeMenu}\n      >\n        <MenuItem onClick={() => closeAndNav(\"profile\")}>Profile</MenuItem>\n        <MenuItem\n          onClick={() => {\n            closeMenu();\n            store.dispatch(signout());\n          }}\n        >\n          Logout\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  token: state.authen.token,\n  categories: state.cat.category,\n});\n\nexport default connect(mapStateToProps)(PageFrame);\n","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js",["87"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\n    const classes = useStyles();\n    const nameRef = useRef(\"\")\n    const unameRef = useRef(\"\")\n    const emailRef = useRef(\"\")\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const otpunameRef = useRef(\"\")\n    const otpRef = useRef(\"\")\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogActions>\n                            <Button onClick={() => onClose()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> : !otp ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Full name\"\n                                type=\"text\"\n                                inputRef={nameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={unameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"email\"\n                                label=\"Email\"\n                                type=\"email\"\n                                inputRef={emailRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\n                                    Otp\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            signup({\n                                                \"name\": nameRef.current.value,\n                                                \"username\": unameRef.current.value,\n                                                \"email\": emailRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Sign up\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    OTP\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={otpunameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"otp\"\n                                type=\"text\"\n                                inputRef={otpRef}\n                                fullWidth\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            {!otploading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\n                                        color=\"primary\">\n                                    Switch to Sign up\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            otpConfirm({\n                                                \"username\": otpunameRef.current.value,\n                                                \"otp\": otpRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Confirm\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nSignUpDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    otp: false,\n    otploading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signUpErr,\n    loading: state.authen.signingUp,\n    otp: state.authen.shouldOtp,\n    otploading: state.authen.otping,\n    finish: state.authen.signingUpFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignUpDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js",["88","89","90","91","92"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js",["93"],"import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nimport Home from \"./pages/home\";\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthRoute from \"./components/AuthRoute\";\nimport Profile from \"./pages/Profile\";\nimport LecturerRoute from \"./components/LecturerRoute\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <AuthRoute exact path=\"/profile\">\n                        <Profile/>\n                    </AuthRoute>\n                    <LecturerRoute exact path={\"/course/manage\"}>\n                        <div>\n                            Lec manage courses\n                        </div>\n                    </LecturerRoute>\n                    <Route path=\"*\">\n                        <NotFound/>\n                    </Route>\n                </Switch>\n            </Router>\n        </Provider>\n    );\n}\n\nstore.subscribe(App)\n\nexport default App;\n",["94","95"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js",[],["96","97"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js",["98"],"import {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport store from \"../store\";\nimport {authenSlice, signin, signup} from \"../store/authen\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport React, {useRef} from \"react\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignInDialog = ({open, onClose, err, loading, finish}) => {\n    const classes = useStyles();\n\n    const unameRef = useRef(\"\");\n    const passRef = useRef(\"\");\n\n    return (\n        finish ? <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Sign in finished\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogActions>\n                    <Button onClick={() => onClose()} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog> :\n        <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Sign In\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"username\"\n                    label=\"username\"\n                    type=\"text\"\n                    inputRef={unameRef}\n                    fullWidth\n                />\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    inputRef={passRef}\n                    fullWidth\n                />\n                {err ? <DialogContentText>\n                    <Typography color='error' component={'span'}>\n                        {err}\n                    </Typography>\n                </DialogContentText> : null}\n            </DialogContent>\n            <DialogActions>\n                {!loading ? <div>\n                    <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"secondary\">\n                        Reset Password\n                    </Button>\n                    <Button onClick={() => onClose()} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={\n                            () => store.dispatch(\n                                signin({\n                                    \"username\": unameRef.current.value,\n                                    \"password\": passRef.current.value,\n                                })\n                            )\n                        }\n                        color=\"primary\">\n                        Sign In\n                    </Button>\n                </div> : <div>\n                    <CircularProgress/>\n                </div>}\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signInErr,\n    loading: state.authen.signingIn,\n    finish: state.authen.signingInFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignInDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/index.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/NotFound.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PaperTest.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js",["99"],{"ruleId":"100","severity":1,"message":"101","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":23},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"100","severity":1,"message":"108","line":6,"column":9,"nodeType":"102","messageId":"103","endLine":6,"endColumn":15},{"ruleId":"100","severity":1,"message":"109","line":7,"column":9,"nodeType":"102","messageId":"103","endLine":7,"endColumn":12},{"ruleId":"104","replacedBy":"110"},{"ruleId":"106","replacedBy":"111"},{"ruleId":"100","severity":1,"message":"108","line":21,"column":23,"nodeType":"102","messageId":"103","endLine":21,"endColumn":29},{"ruleId":"100","severity":1,"message":"112","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":19},{"ruleId":"100","severity":1,"message":"113","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":12},{"ruleId":"100","severity":1,"message":"114","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":16},{"ruleId":"100","severity":1,"message":"115","line":15,"column":8,"nodeType":"102","messageId":"103","endLine":15,"endColumn":17},{"ruleId":"100","severity":1,"message":"116","line":16,"column":8,"nodeType":"102","messageId":"103","endLine":16,"endColumn":22},{"ruleId":"100","severity":1,"message":"117","line":18,"column":10,"nodeType":"102","messageId":"103","endLine":18,"endColumn":15},{"ruleId":"100","severity":1,"message":"118","line":6,"column":5,"nodeType":"102","messageId":"103","endLine":6,"endColumn":9},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"106","replacedBy":"122"},{"ruleId":"100","severity":1,"message":"123","line":10,"column":30,"nodeType":"102","messageId":"103","endLine":10,"endColumn":36},{"ruleId":"100","severity":1,"message":"124","line":6,"column":8,"nodeType":"102","messageId":"103","endLine":6,"endColumn":19},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["125"],"no-negated-in-lhs",["126"],"'signin' is defined but never used.","'act' is defined but never used.",["125"],["126"],"'DialogTitle' is defined but never used.","'clsx' is defined but never used.","'Collapse' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Paper' is defined but never used.","'Link' is defined but never used.",["125"],["126"],["125"],["126"],"'signup' is defined but never used.","'ComplexCard' is defined but never used.","no-global-assign","no-unsafe-negation"]