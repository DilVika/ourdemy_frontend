[{"E:\\prj\\ourdemy_frontend\\src\\index.js":"1","E:\\prj\\ourdemy_frontend\\src\\App.js":"2","E:\\prj\\ourdemy_frontend\\src\\reportWebVitals.js":"3","E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js":"4","E:\\prj\\ourdemy_frontend\\src\\store\\index.js":"5","E:\\prj\\ourdemy_frontend\\src\\components\\AppBar.js":"6","E:\\prj\\ourdemy_frontend\\src\\pages\\home.js":"7","E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js":"8","E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js":"9","E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js":"10","E:\\prj\\ourdemy_frontend\\src\\components\\SignInDialog.js":"11","E:\\prj\\ourdemy_frontend\\src\\components\\AuthRoute.js":"12","E:\\prj\\ourdemy_frontend\\src\\pages\\NotFound.js":"13","E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js":"14","E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js":"15","E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js":"16"},{"size":601,"mtime":1609480476111,"results":"17","hashOfConfig":"18"},{"size":970,"mtime":1609587636325,"results":"19","hashOfConfig":"18"},{"size":424,"mtime":1609403933576,"results":"20","hashOfConfig":"18"},{"size":5415,"mtime":1609597628295,"results":"21","hashOfConfig":"18"},{"size":288,"mtime":1609480585970,"results":"22","hashOfConfig":"18"},{"size":3280,"mtime":1609477583010,"results":"23","hashOfConfig":"18"},{"size":307,"mtime":1609480181588,"results":"24","hashOfConfig":"18"},{"size":9336,"mtime":1609591676905,"results":"25","hashOfConfig":"18"},{"size":1044,"mtime":1609485833784,"results":"26","hashOfConfig":"18"},{"size":9668,"mtime":1609514024760,"results":"27","hashOfConfig":"18"},{"size":4147,"mtime":1609564958377,"results":"28","hashOfConfig":"18"},{"size":568,"mtime":1609569086390,"results":"29","hashOfConfig":"18"},{"size":1466,"mtime":1609567612844,"results":"30","hashOfConfig":"18"},{"size":13155,"mtime":1609597488030,"results":"31","hashOfConfig":"18"},{"size":1449,"mtime":1609595652943,"results":"32","hashOfConfig":"18"},{"size":625,"mtime":1609596555651,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"11ggw5d",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\prj\\ourdemy_frontend\\src\\index.js",[],[],"E:\\prj\\ourdemy_frontend\\src\\App.js",[],"E:\\prj\\ourdemy_frontend\\src\\reportWebVitals.js",[],[],"E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js",[],"E:\\prj\\ourdemy_frontend\\src\\store\\index.js",[],[],"E:\\prj\\ourdemy_frontend\\src\\components\\AppBar.js",[],"E:\\prj\\ourdemy_frontend\\src\\pages\\home.js",[],"E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js",["73","74","75","76","77"],"import React, {useState} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {fade, makeStyles} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport IconExpandLess from '@material-ui/icons/ExpandLess'\r\nimport IconExpandMore from '@material-ui/icons/ExpandMore'\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {authenSlice, signin, signout} from \"../store/authen\";\r\nimport store from \"../store\";\r\nimport {connect} from \"react-redux\";\r\nimport SignUpDialog from \"./SignUpDialog\";\r\nimport SignInDialog from \"./SignInDialog\";\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\nimport {AccountCircle} from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        display: 'none',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'block',\r\n        },\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        marginLeft: 0,\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: '12ch',\r\n            '&:focus': {\r\n                width: '20ch',\r\n            },\r\n        },\r\n    },\r\n    appBar: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        zIndex: 2,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        zIndex: 1,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        marginTop: '70px',\r\n        display: 'flex'\r\n    },\r\n    pageContent: {\r\n        flexGrow: 1,\r\n    },\r\n    btn: {\r\n        marginLeft: '10px',\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n}));\r\n\r\n\r\nconst PageFrame = ({token, categories, children}) => {\r\n    const classes = useStyles();\r\n    const isOpenArray = categories.map((cat, index) => {\r\n        return false\r\n    })\r\n\r\n    const [itemOpen, setItemOpen] = useState(isOpenArray);\r\n    const [signUpDialogOpen, setSignUpDialogOpen] = useState(false);\r\n    const [signInDialogOpen, setSignInDialogOpen] = useState(false);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const history = useHistory();\r\n\r\n    const toggleItem = (index, open) => {\r\n        const itemOpenCopy = [...itemOpen]\r\n        itemOpenCopy[index] = open\r\n        setItemOpen(itemOpenCopy)\r\n    }\r\n\r\n    const closeMenu = () => {\r\n        setAnchorEl(null)\r\n    }\r\n\r\n    const closeAndNav = (path) => {\r\n        setAnchorEl(null)\r\n        history.push(`/${path}`)\r\n    }\r\n\r\n    const navCat = (path) => {\r\n        history.push(`/cat/${path}`)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography className={classes.title} variant=\"h4\" noWrap>\r\n                        Ourdemy\r\n                    </Typography>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <SearchIcon/>\r\n                        </div>\r\n                        <InputBase\r\n                            placeholder=\"Searchâ€¦\"\r\n                            classes={{\r\n                                root: classes.inputRoot,\r\n                                input: classes.inputInput,\r\n                            }}\r\n                            inputProps={{'aria-label': 'search'}}\r\n                        />\r\n                    </div>\r\n                    {!token ? <div>\r\n                        <Button className={classes.btn}\r\n                                onClick={() => setSignInDialogOpen(true)}\r\n                                color=\"inherit\">Log In</Button>\r\n                        <Button className={classes.btn}\r\n                                color=\"inherit\" onClick={() => setSignUpDialogOpen(true)}>Sign Up</Button>\r\n                    </div> : <div>\r\n                        <IconButton className={classes.btn} aria-controls=\"simple-menu\" aria-haspopup=\"true\"\r\n                                    color=\"inherit\" onClick={(e) => setAnchorEl(e.currentTarget)}>\r\n                            <AccountCircle/>\r\n                        </IconButton>\r\n                    </div>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n                anchor=\"left\"\r\n            >\r\n                <div className={classes.toolbar}/>\r\n                <Divider/>\r\n                <List>\r\n                    {categories.map((cat, index) => (\r\n                        <div key={cat.cid}>\r\n                            <ListItem button>\r\n                                <ListItemText primary={cat.cat_name} onClick={() => navCat(cat.cat_name)}/>\r\n                                <div role=\"button\" onClick={(e) => toggleItem(index, !itemOpen[index])}>\r\n                                    {itemOpen[index] ? <IconExpandLess/> :\r\n                                        <IconExpandMore/>}\r\n                                </div>\r\n                            </ListItem>\r\n                            {\r\n                                cat.subcats ?\r\n                                    <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\r\n                                        <Divider/>\r\n                                        <List component=\"div\" disablePadding>\r\n                                            {cat.subcats.map((sub, index) => (\r\n                                                <ListItem button key={sub.scid}>\r\n                                                    <ListItemText inset\r\n                                                                  onClick={() => navCat(`${cat.cat_name}/${sub.subcat_name}`)}\r\n                                                                  primary={sub.subcat_name}/>\r\n                                                </ListItem>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Collapse>\r\n                                    : null\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </List>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.pageContent}>\r\n                    {children}\r\n                </div>\r\n            </main>\r\n            <SignUpDialog open={signUpDialogOpen} onClose={() => {\r\n                setSignUpDialogOpen(false)\r\n                store.dispatch(authenSlice.actions.resetSignUpState())\r\n            }}/>\r\n            <SignInDialog open={signInDialogOpen} onClose={() => {\r\n                setSignInDialogOpen(false)\r\n                store.dispatch(authenSlice.actions.resetSignInState())\r\n            }}/>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={closeMenu}\r\n            >\r\n                <MenuItem onClick={() => closeAndNav('profile')}>Profile</MenuItem>\r\n                <MenuItem onClick={() => {\r\n                    closeMenu()\r\n                    store.dispatch(signout())\r\n                }}>Logout</MenuItem>\r\n            </Menu>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    token: state.authen.token,\r\n    categories: state.cat.category\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(PageFrame);","E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js",[],"E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js",["78","79","80","81","82","83","84"],"import React, {useRef} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport store from \"../store\";\r\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\r\n    const classes = useStyles();\r\n    const nameRef = useRef(\"\")\r\n    const unameRef = useRef(\"\")\r\n    const emailRef = useRef(\"\")\r\n    const passRef = useRef(\"\")\r\n    const rpassRef = useRef(\"\")\r\n\r\n    const otpunameRef = useRef(\"\")\r\n    const otpRef = useRef(\"\")\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                finish ?\r\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Sign up finished\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogActions>\r\n                            <Button onClick={() => onClose()} color=\"primary\">\r\n                                Ok\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Dialog> : !otp ?\r\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    Sign up\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"name\"\r\n                                label=\"Full name\"\r\n                                type=\"text\"\r\n                                inputRef={nameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"username\"\r\n                                type=\"text\"\r\n                                inputRef={unameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                type=\"email\"\r\n                                inputRef={emailRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                inputRef={passRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"rpassword\"\r\n                                label=\"Repeat Password\"\r\n                                type=\"password\"\r\n                                inputRef={rpassRef}\r\n                                fullWidth\r\n                            />\r\n                            {err ? <DialogContentText>\r\n                                <Typography color='error' component={'span'}>\r\n                                    {err}\r\n                                </Typography>\r\n                            </DialogContentText> : null}\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {!loading ? <div>\r\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\r\n                                    Otp\r\n                                </Button>\r\n                                <Button onClick={() => onClose()} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={\r\n                                        () => store.dispatch(\r\n                                            signup({\r\n                                                \"name\": nameRef.current.value,\r\n                                                \"username\": unameRef.current.value,\r\n                                                \"email\": emailRef.current.value,\r\n                                                \"password\": passRef.current.value,\r\n                                                \"repeatPassword\": rpassRef.current.value,\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                    color=\"primary\">\r\n                                    Sign up\r\n                                </Button>\r\n                            </div> : <div>\r\n                                <CircularProgress/>\r\n                            </div>}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                        <AppBar className={classes.appBar}>\r\n                            <Toolbar>\r\n                                <Typography variant=\"h6\" className={classes.title}>\r\n                                    OTP\r\n                                </Typography>\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                        <DialogContent>\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"username\"\r\n                                type=\"text\"\r\n                                inputRef={otpunameRef}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                autoFocus\r\n                                margin=\"dense\"\r\n                                id=\"username\"\r\n                                label=\"otp\"\r\n                                type=\"text\"\r\n                                inputRef={otpRef}\r\n                                fullWidth\r\n                            />\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                            {!otploading ? <div>\r\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\r\n                                        color=\"primary\">\r\n                                    Switch to Sign up\r\n                                </Button>\r\n                                <Button onClick={() => onClose()} color=\"primary\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={\r\n                                        () => store.dispatch(\r\n                                            otpConfirm({\r\n                                                \"username\": otpunameRef.current.value,\r\n                                                \"otp\": otpRef.current.value,\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                    color=\"primary\">\r\n                                    Confirm\r\n                                </Button>\r\n                            </div> : <div>\r\n                                <CircularProgress/>\r\n                            </div>}\r\n                        </DialogActions>\r\n                    </Dialog>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nSignUpDialog.defaultProps = {\r\n    open: false,\r\n    err: null,\r\n    loading: false,\r\n    otp: false,\r\n    otploading: false,\r\n    finish: false\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    err: state.authen.signUpErr,\r\n    loading: state.authen.signingUp,\r\n    otp: state.authen.shouldOtp,\r\n    otploading: state.authen.otping,\r\n    finish: state.authen.signingUpFinish,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(SignUpDialog)","E:\\prj\\ourdemy_frontend\\src\\components\\SignInDialog.js",["85","86","87","88","89"],"import {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport store from \"../store\";\r\nimport {authenSlice, signin, signup} from \"../store/authen\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport React, {useRef} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst SignInDialog = ({open, onClose, err, loading, finish}) => {\r\n    const classes = useStyles();\r\n\r\n    const unameRef = useRef(\"\");\r\n    const passRef = useRef(\"\");\r\n\r\n    return (\r\n        finish ? <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n                <AppBar className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            Sign in finished\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <DialogActions>\r\n                    <Button onClick={() => onClose()} color=\"primary\">\r\n                        Ok\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog> :\r\n        <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Sign In\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DialogContent>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"username\"\r\n                    label=\"username\"\r\n                    type=\"text\"\r\n                    inputRef={unameRef}\r\n                    fullWidth\r\n                />\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    inputRef={passRef}\r\n                    fullWidth\r\n                />\r\n                {err ? <DialogContentText>\r\n                    <Typography color='error' component={'span'}>\r\n                        {err}\r\n                    </Typography>\r\n                </DialogContentText> : null}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {!loading ? <div>\r\n                    <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"secondary\">\r\n                        Reset Password\r\n                    </Button>\r\n                    <Button onClick={() => onClose()} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={\r\n                            () => store.dispatch(\r\n                                signin({\r\n                                    \"username\": unameRef.current.value,\r\n                                    \"password\": passRef.current.value,\r\n                                })\r\n                            )\r\n                        }\r\n                        color=\"primary\">\r\n                        Sign In\r\n                    </Button>\r\n                </div> : <div>\r\n                    <CircularProgress/>\r\n                </div>}\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    err: state.authen.signInErr,\r\n    loading: state.authen.signingIn,\r\n    finish: state.authen.signingInFinish,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(SignInDialog)","E:\\prj\\ourdemy_frontend\\src\\components\\AuthRoute.js",["90","91","92"],"E:\\prj\\ourdemy_frontend\\src\\pages\\NotFound.js",[],"E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js",["93","94","95","96","97","98","99","100","101","102","103","104"],"E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js",["105","106","107","108","109","110","111","112"],"import React from \"react\";\r\nimport {\r\n    AppBar, Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    makeStyles,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst YesNoDialog = ({open, onClose, onCancel, onConfirm, title, content, loading, success}) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Dialog open={open} onClose={() => onClose()}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {title}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {content}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant={\"contained\"} color={\"secondary\"} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant={\"contained\"} color={\"primary\"} onClick={() => onConfirm()}>\r\n                    Confirm\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default YesNoDialog","E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js",["113","114","115","116"],{"ruleId":"117","severity":1,"message":"118","line":113,"column":21,"nodeType":"119","endLine":113,"endColumn":26},{"ruleId":"117","severity":1,"message":"120","line":113,"column":28,"nodeType":"119","endLine":113,"endColumn":38},{"ruleId":"117","severity":1,"message":"121","line":113,"column":40,"nodeType":"119","endLine":113,"endColumn":48},{"ruleId":"117","severity":1,"message":"122","line":115,"column":36,"nodeType":"123","endLine":115,"endColumn":39},{"ruleId":"117","severity":1,"message":"122","line":191,"column":33,"nodeType":"123","endLine":191,"endColumn":36},{"ruleId":"117","severity":1,"message":"124","line":25,"column":24,"nodeType":"119","endLine":25,"endColumn":28},{"ruleId":"117","severity":1,"message":"125","line":25,"column":30,"nodeType":"119","endLine":25,"endColumn":37},{"ruleId":"117","severity":1,"message":"126","line":25,"column":39,"nodeType":"119","endLine":25,"endColumn":42},{"ruleId":"117","severity":1,"message":"127","line":25,"column":44,"nodeType":"119","endLine":25,"endColumn":51},{"ruleId":"117","severity":1,"message":"128","line":25,"column":53,"nodeType":"119","endLine":25,"endColumn":56},{"ruleId":"117","severity":1,"message":"129","line":25,"column":58,"nodeType":"119","endLine":25,"endColumn":68},{"ruleId":"117","severity":1,"message":"130","line":25,"column":70,"nodeType":"119","endLine":25,"endColumn":76},{"ruleId":"117","severity":1,"message":"124","line":24,"column":24,"nodeType":"119","endLine":24,"endColumn":28},{"ruleId":"117","severity":1,"message":"125","line":24,"column":30,"nodeType":"119","endLine":24,"endColumn":37},{"ruleId":"117","severity":1,"message":"126","line":24,"column":39,"nodeType":"119","endLine":24,"endColumn":42},{"ruleId":"117","severity":1,"message":"127","line":24,"column":44,"nodeType":"119","endLine":24,"endColumn":51},{"ruleId":"117","severity":1,"message":"130","line":24,"column":53,"nodeType":"119","endLine":24,"endColumn":59},{"ruleId":"117","severity":1,"message":"121","line":9,"column":24,"nodeType":"119","endLine":9,"endColumn":32},{"ruleId":"117","severity":1,"message":"131","line":9,"column":34,"nodeType":"119","endLine":9,"endColumn":40},{"ruleId":"117","severity":1,"message":"132","line":15,"column":69,"nodeType":"123","endLine":15,"endColumn":77},{"ruleId":"117","severity":1,"message":"133","line":44,"column":19,"nodeType":"119","endLine":44,"endColumn":23},{"ruleId":"117","severity":1,"message":"134","line":44,"column":25,"nodeType":"119","endLine":44,"endColumn":32},{"ruleId":"117","severity":1,"message":"126","line":44,"column":34,"nodeType":"119","endLine":44,"endColumn":37},{"ruleId":"117","severity":1,"message":"135","line":60,"column":39,"nodeType":"123","endLine":60,"endColumn":47},{"ruleId":"117","severity":1,"message":"136","line":61,"column":38,"nodeType":"123","endLine":61,"endColumn":46},{"ruleId":"117","severity":1,"message":"137","line":62,"column":39,"nodeType":"123","endLine":62,"endColumn":44},{"ruleId":"117","severity":1,"message":"135","line":89,"column":83,"nodeType":"123","endLine":89,"endColumn":91},{"ruleId":"117","severity":1,"message":"136","line":97,"column":82,"nodeType":"123","endLine":97,"endColumn":90},{"ruleId":"117","severity":1,"message":"137","line":105,"column":83,"nodeType":"123","endLine":105,"endColumn":88},{"ruleId":"117","severity":1,"message":"138","line":139,"column":57,"nodeType":"123","endLine":139,"endColumn":62},{"ruleId":"117","severity":1,"message":"138","line":148,"column":57,"nodeType":"123","endLine":148,"endColumn":62},{"ruleId":"117","severity":1,"message":"139","line":195,"column":53,"nodeType":"123","endLine":195,"endColumn":56},{"ruleId":"117","severity":1,"message":"124","line":22,"column":23,"nodeType":"119","endLine":22,"endColumn":27},{"ruleId":"117","severity":1,"message":"125","line":22,"column":29,"nodeType":"119","endLine":22,"endColumn":36},{"ruleId":"117","severity":1,"message":"140","line":22,"column":38,"nodeType":"119","endLine":22,"endColumn":46},{"ruleId":"117","severity":1,"message":"141","line":22,"column":48,"nodeType":"119","endLine":22,"endColumn":57},{"ruleId":"117","severity":1,"message":"142","line":22,"column":59,"nodeType":"119","endLine":22,"endColumn":64},{"ruleId":"117","severity":1,"message":"143","line":22,"column":66,"nodeType":"119","endLine":22,"endColumn":73},{"ruleId":"117","severity":1,"message":"127","line":22,"column":75,"nodeType":"119","endLine":22,"endColumn":82},{"ruleId":"117","severity":1,"message":"144","line":22,"column":84,"nodeType":"119","endLine":22,"endColumn":91},{"ruleId":"117","severity":1,"message":"121","line":9,"column":25,"nodeType":"119","endLine":9,"endColumn":33},{"ruleId":"117","severity":1,"message":"131","line":9,"column":35,"nodeType":"119","endLine":9,"endColumn":41},{"ruleId":"117","severity":1,"message":"145","line":9,"column":43,"nodeType":"119","endLine":9,"endColumn":48},{"ruleId":"117","severity":1,"message":"132","line":15,"column":69,"nodeType":"123","endLine":15,"endColumn":77},"react/prop-types","'token' is missing in props validation","Property","'categories' is missing in props validation","'children' is missing in props validation","'categories.map' is missing in props validation","Identifier","'open' is missing in props validation","'onClose' is missing in props validation","'err' is missing in props validation","'loading' is missing in props validation","'otp' is missing in props validation","'otploading' is missing in props validation","'finish' is missing in props validation","'authed' is missing in props validation","'location' is missing in props validation","'user' is missing in props validation","'favList' is missing in props validation","'user.username' is missing in props validation","'user.fullname' is missing in props validation","'user.email' is missing in props validation","'user.isLec' is missing in props validation","'favList.map' is missing in props validation","'onCancel' is missing in props validation","'onConfirm' is missing in props validation","'title' is missing in props validation","'content' is missing in props validation","'success' is missing in props validation","'isLec' is missing in props validation"]