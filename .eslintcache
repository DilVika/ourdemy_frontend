[{"E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js":"1","E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js":"2","E:\\prj\\ourdemy_frontend\\src\\index.js":"3","E:\\prj\\ourdemy_frontend\\src\\components\\CCarousel.js":"4","E:\\prj\\ourdemy_frontend\\src\\components\\ComplexCard.js":"5","E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js":"6","E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js":"7","E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js":"8","E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js":"9","E:\\prj\\ourdemy_frontend\\src\\App.js":"10","E:\\prj\\ourdemy_frontend\\src\\components\\UpdatePassword.js":"11","E:\\prj\\ourdemy_frontend\\src\\pages\\CourseManage.js":"12","E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js":"13"},{"size":1044,"mtime":1609485833784,"results":"14","hashOfConfig":"15"},{"size":1431,"mtime":1609659037355,"results":"16","hashOfConfig":"15"},{"size":736,"mtime":1609680948893,"results":"17","hashOfConfig":"15"},{"size":1559,"mtime":1609673631331,"results":"18","hashOfConfig":"15"},{"size":2629,"mtime":1609673631331,"results":"19","hashOfConfig":"15"},{"size":13968,"mtime":1609677783070,"results":"20","hashOfConfig":"15"},{"size":9476,"mtime":1609742278293,"results":"21","hashOfConfig":"15"},{"size":10577,"mtime":1609681016742,"results":"22","hashOfConfig":"15"},{"size":649,"mtime":1609678610127,"results":"23","hashOfConfig":"15"},{"size":1140,"mtime":1609678731735,"results":"24","hashOfConfig":"15"},{"size":6020,"mtime":1609658009714,"results":"25","hashOfConfig":"15"},{"size":5581,"mtime":1609740705909,"results":"26","hashOfConfig":"15"},{"size":9668,"mtime":1609514024760,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ej66oa",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\prj\\ourdemy_frontend\\src\\store\\category\\index.js",["56","57"],"E:\\prj\\ourdemy_frontend\\src\\components\\YesNoDialog.js",[],"E:\\prj\\ourdemy_frontend\\src\\index.js",["58","59"],"E:\\prj\\ourdemy_frontend\\src\\components\\CCarousel.js",[],["60","61"],"E:\\prj\\ourdemy_frontend\\src\\components\\ComplexCard.js",["62","63","64","65"],"E:\\prj\\ourdemy_frontend\\src\\pages\\Profile.js",["66","67","68","69","70"],"import React, {useEffect, useRef, useState} from 'react';\r\n\r\nimport PageFrame from \"../components/PageFrame\";\r\nimport {\r\n    Button, CircularProgress,\r\n    Divider,\r\n    Grid, IconButton,\r\n    Input,\r\n    List,\r\n    ListItem, ListItemSecondaryAction,\r\n    ListItemText,\r\n    Paper, Snackbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Close, Delete} from \"@material-ui/icons\";\r\nimport YesNoDialog from \"../components/YesNoDialog\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {fetchFavList, fetchProfile, updateProfile} from \"../store/authen\";\r\nimport store from \"../store\";\r\nimport UpdatePasswordDialog from \"../components/UpdatePassword\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    root: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    buttonBar: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    },\r\n    coursePaper: {\r\n        marginTop: '8px',\r\n        marginBottom: '8px',\r\n        marginRight: '8px'\r\n    },\r\n    main: {\r\n        width: '99%',\r\n    },\r\n    loadingCenter: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }\r\n}))\r\n\r\nconst Profile = ({user, favList, fetching, favListFetching, err, favErr}) => {\r\n    const classes = useStyles()\r\n\r\n    const [updateMode, setUpdateMode] = useState(false);\r\n    const [updateDialogOpen, setUpdateDialogOpen] = useState(false);\r\n    const [updatePasswordDialogOpen, setUpdatePasswordDialogOpen] = useState(false);\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        store.dispatch(fetchProfile())\r\n    }, [])\r\n\r\n    const unameRef = useRef(\"\")\r\n    const nameRef = useRef(\"\")\r\n    const emailRef = useRef(\"\")\r\n    const history = useHistory();\r\n\r\n    const resetFieldsUpdate = () => {\r\n        unameRef.current.value = user.username\r\n        nameRef.current.value = user.fullname\r\n        emailRef.current.value = user.email\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <PageFrame>\r\n                <div className={classes.main}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={6}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant={\"h6\"} align={\"center\"} color={\"primary\"}>\r\n                                        Profile\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Divider/>\r\n                                </Grid>\r\n                                {\r\n                                    err ?\r\n                                        <Grid item xs={12}>\r\n                                            <Typography align={\"center\"} color={\"error\"}>\r\n                                                {err}\r\n                                            </Typography>\r\n                                        </Grid> : null\r\n                                }\r\n                                {\r\n                                    !fetching ? <>\r\n                                        <Grid item xs={6}>\r\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\r\n                                                Username\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Input inputRef={unameRef} defaultValue={user.username}\r\n                                                   disabled/>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\r\n                                                Fullname\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Input inputRef={nameRef} defaultValue={user.fullname}\r\n                                                   disabled={!updateMode}/>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\r\n                                                Email\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Input inputRef={emailRef} defaultValue={user.email}\r\n                                                   disabled={!updateMode}/>\r\n                                        </Grid>\r\n                                        {\r\n                                            updateMode && !user.isLec ? <Grid item xs={12}>\r\n                                                <div className={classes.buttonBar}>\r\n                                                    <Button variant={\"outlined\"} color={\"secondary\"}>\r\n                                                        Upgrade to Lecturer\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </Grid> : null\r\n                                        }\r\n                                        {\r\n                                            !updateMode && user.isLec ? <Grid item xs={12}>\r\n                                                <div className={classes.buttonBar}>\r\n                                                    <Button variant={\"outlined\"} color={\"primary\"}\r\n                                                            onClick={() => history.push(\"/course/manage\")}>\r\n                                                        Manage Courses\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </Grid> : null\r\n                                        }\r\n                                        <Grid item xs={12}>\r\n                                            <div className={classes.buttonBar}>\r\n                                                {updateMode ? <div>\r\n                                                    <Button variant={\"contained\"} color={\"secondary\"}\r\n                                                            style={{marginRight: \"5px\"}}\r\n                                                            onClick={() => {\r\n                                                                setUpdateMode(false)\r\n                                                                resetFieldsUpdate()\r\n                                                            }\r\n                                                            }>\r\n                                                        Cancel\r\n                                                    </Button>\r\n                                                    <Button variant={\"contained\"} color={\"primary\"}\r\n                                                            onClick={() => setUpdateDialogOpen(true)}>\r\n                                                        Submit\r\n                                                    </Button>\r\n                                                </div> : <>\r\n                                                    <Button style={{marginRight: \"5px\"}} variant={\"contained\"}\r\n                                                            color={\"secondary\"}\r\n                                                            onClick={() => setUpdatePasswordDialogOpen(true)}\r\n                                                    >\r\n                                                        Update Password\r\n                                                    </Button>\r\n                                                    <Button variant={\"contained\"} color={\"primary\"}\r\n                                                            onClick={() => setUpdateMode(true)}>\r\n                                                        Update\r\n                                                    </Button>\r\n                                                </>}\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </> : <>\r\n                                        {\r\n                                            !err ? <Grid item xs={12}>\r\n                                                <div className={classes.loadingCenter}>\r\n                                                    <CircularProgress/>\r\n                                                </div>\r\n                                            </Grid> : null\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant={\"h6\"} align={\"center\"} color={\"primary\"}>\r\n                                        Favorite Courses\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Divider/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {\r\n                                favListFetching ? <></> : <>\r\n                                    {\r\n                                        !favErr ? <Grid item xs={12}>\r\n                                                <div style={{maxHeight: '80vh', overflow: 'auto'}}>\r\n                                                    <List>\r\n                                                        {\r\n                                                            favList.map((fav) => (\r\n                                                                <Paper variant={\"outlined\"} className={classes.coursePaper}\r\n                                                                       key={fav.cid}\r\n                                                                       elevation={1}>\r\n                                                                    <ListItem>\r\n                                                                        <ListItemText>\r\n                                                                            {fav.name}\r\n                                                                        </ListItemText>\r\n                                                                        <ListItemSecondaryAction>\r\n                                                                            <IconButton edge=\"end\" aria-label=\"comments\">\r\n                                                                                <Delete/>\r\n                                                                            </IconButton>\r\n                                                                        </ListItemSecondaryAction>\r\n                                                                    </ListItem>\r\n                                                                </Paper>\r\n                                                            ))\r\n                                                        }\r\n                                                    </List>\r\n                                                </div>\r\n                                            </Grid> :\r\n                                            <Grid item xs={12}>\r\n                                                <Typography align={\"center\"} color={\"error\"}>\r\n                                                    {favErr}\r\n                                                </Typography>\r\n                                            </Grid>\r\n\r\n                                    }\r\n                                </>\r\n\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </PageFrame>\r\n            <YesNoDialog open={updateDialogOpen} onClose={() => setUpdateDialogOpen(false)} title={\"Update\"}\r\n                         content={\"Are you sure you want to update your information? Ò w Ó\"}\r\n                         onConfirm={() => {\r\n                             store.dispatch(updateProfile({\r\n                                 \"fullname\": nameRef.current.value,\r\n                                 \"email\": emailRef.current.value\r\n                             }))\r\n                             setUpdateDialogOpen(false)\r\n                         }\r\n\r\n                         }\r\n                         onCancel={() => setUpdateDialogOpen(false)}\r\n            />\r\n            <UpdatePasswordDialog open={updatePasswordDialogOpen} onClose={() => setUpdatePasswordDialogOpen(false)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nProfile.defaultProps = {\r\n    user: {\r\n        \"username\": \"\",\r\n        \"fullname\": \"\",\r\n        \"password\": \"\",\r\n        \"email\": \"\",\r\n        \"isLec\": false\r\n    },\r\n    favList: [],\r\n    err: null\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    user: state.authen.user,\r\n    favList: state.authen.favList,\r\n    err: state.authen.updateErr,\r\n    fetching: state.authen.fetching,\r\n    favListFetching: state.authen.fetchingFav,\r\n    favErr: state.authen.favListErr\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Profile);","E:\\prj\\ourdemy_frontend\\src\\components\\PageFrame.js",["71"],"E:\\prj\\ourdemy_frontend\\src\\store\\authen\\index.js",[],"E:\\prj\\ourdemy_frontend\\src\\components\\LecturerRoute.js",[],"E:\\prj\\ourdemy_frontend\\src\\App.js",["72"],"E:\\prj\\ourdemy_frontend\\src\\components\\UpdatePassword.js",["73","74","75"],"E:\\prj\\ourdemy_frontend\\src\\pages\\CourseManage.js",["76","77","78","79","80","81"],"E:\\prj\\ourdemy_frontend\\src\\components\\SignUpDialog.js",["82"],{"ruleId":"83","severity":1,"message":"84","line":6,"column":9,"nodeType":"85","messageId":"86","endLine":6,"endColumn":15},{"ruleId":"83","severity":1,"message":"87","line":7,"column":9,"nodeType":"85","messageId":"86","endLine":7,"endColumn":12},{"ruleId":"83","severity":1,"message":"88","line":5,"column":8,"nodeType":"85","messageId":"86","endLine":5,"endColumn":23},{"ruleId":"83","severity":1,"message":"89","line":8,"column":9,"nodeType":"85","messageId":"86","endLine":8,"endColumn":21},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"83","severity":1,"message":"94","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":12},{"ruleId":"83","severity":1,"message":"95","line":9,"column":8,"nodeType":"85","messageId":"86","endLine":9,"endColumn":16},{"ruleId":"83","severity":1,"message":"96","line":15,"column":8,"nodeType":"85","messageId":"86","endLine":15,"endColumn":17},{"ruleId":"83","severity":1,"message":"97","line":16,"column":8,"nodeType":"85","messageId":"86","endLine":16,"endColumn":22},{"ruleId":"83","severity":1,"message":"98","line":12,"column":12,"nodeType":"85","messageId":"86","endLine":12,"endColumn":20},{"ruleId":"83","severity":1,"message":"99","line":16,"column":9,"nodeType":"85","messageId":"86","endLine":16,"endColumn":14},{"ruleId":"83","severity":1,"message":"100","line":20,"column":9,"nodeType":"85","messageId":"86","endLine":20,"endColumn":21},{"ruleId":"83","severity":1,"message":"101","line":53,"column":12,"nodeType":"85","messageId":"86","endLine":53,"endColumn":24},{"ruleId":"83","severity":1,"message":"102","line":53,"column":26,"nodeType":"85","messageId":"86","endLine":53,"endColumn":41},{"ruleId":"83","severity":1,"message":"84","line":21,"column":22,"nodeType":"85","messageId":"86","endLine":21,"endColumn":28},{"ruleId":null,"fatal":true,"severity":2,"message":"103","line":31,"column":21},{"ruleId":"83","severity":1,"message":"104","line":8,"column":8,"nodeType":"85","messageId":"86","endLine":8,"endColumn":19},{"ruleId":"83","severity":1,"message":"105","line":13,"column":22,"nodeType":"85","messageId":"86","endLine":13,"endColumn":32},{"ruleId":"83","severity":1,"message":"106","line":13,"column":34,"nodeType":"85","messageId":"86","endLine":13,"endColumn":40},{"ruleId":"83","severity":1,"message":"107","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":13},{"ruleId":"83","severity":1,"message":"108","line":8,"column":11,"nodeType":"85","messageId":"86","endLine":8,"endColumn":22},{"ruleId":"83","severity":1,"message":"109","line":11,"column":16,"nodeType":"85","messageId":"86","endLine":11,"endColumn":24},{"ruleId":"83","severity":1,"message":"110","line":13,"column":5,"nodeType":"85","messageId":"86","endLine":13,"endColumn":8},{"ruleId":"83","severity":1,"message":"111","line":16,"column":5,"nodeType":"85","messageId":"86","endLine":16,"endColumn":10},{"ruleId":"83","severity":1,"message":"112","line":19,"column":9,"nodeType":"85","messageId":"86","endLine":19,"endColumn":12},{"ruleId":"83","severity":1,"message":"104","line":8,"column":8,"nodeType":"85","messageId":"86","endLine":8,"endColumn":19},"no-unused-vars","'signin' is defined but never used.","Identifier","unusedVar","'act' is defined but never used.","'reportWebVitals' is defined but never used.","'initialState' is defined but never used.","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"'clsx' is defined but never used.","'Collapse' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'Snackbar' is defined but never used.","'Close' is defined but never used.","'fetchFavList' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'setSnackbarOpen' is assigned a value but never used.","Parsing error: Unexpected token\n\n  29 |                     <LecturerRoute exact path={\"/course/manage\"}>\n  30 |                         <\n> 31 |                     </LecturerRoute>\n     |                     ^\n  32 |                     <Route path=\"*\">\n  33 |                         <NotFound/>\n  34 |                     </Route>","'DialogTitle' is defined but never used.","'otpConfirm' is defined but never used.","'signup' is defined but never used.","'store' is defined but never used.","'CardActions' is defined but never used.","'Checkbox' is defined but never used.","'Fab' is defined but never used.","'Paper' is defined but never used.","'Add' is defined but never used.","no-global-assign","no-unsafe-negation"]