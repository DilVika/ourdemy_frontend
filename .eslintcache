[{"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js":"1","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/NotFound.js":"2","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js":"3","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js":"4","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js":"5","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js":"6","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js":"7","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js":"8","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js":"9","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js":"10","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js":"11","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/reportWebVitals.js":"12","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js":"13","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js":"14"},{"size":1179,"mtime":1609662814164,"results":"15","hashOfConfig":"16"},{"size":1420,"mtime":1609612032293,"results":"17","hashOfConfig":"16"},{"size":1953,"mtime":1609670910074,"results":"18","hashOfConfig":"16"},{"size":9162,"mtime":1609669992448,"results":"19","hashOfConfig":"16"},{"size":9449,"mtime":1609612032291,"results":"20","hashOfConfig":"16"},{"size":2546,"mtime":1609671046704,"results":"21","hashOfConfig":"16"},{"size":601,"mtime":1609612032292,"results":"22","hashOfConfig":"16"},{"size":1003,"mtime":1609612032295,"results":"23","hashOfConfig":"16"},{"size":13892,"mtime":1609665253340,"results":"24","hashOfConfig":"16"},{"size":4034,"mtime":1609612032291,"results":"25","hashOfConfig":"16"},{"size":1494,"mtime":1609670483941,"results":"26","hashOfConfig":"16"},{"size":409,"mtime":1609425745500,"results":"27","hashOfConfig":"16"},{"size":599,"mtime":1609612032290,"results":"28","hashOfConfig":"16"},{"size":1399,"mtime":1609612032292,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"j4d77n",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"33"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js",["65"],"import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nimport Home from \"./pages/home\";\nimport store from \"./store\";\nimport {Provider} from \"react-redux\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthRoute from \"./components/AuthRoute\";\nimport Profile from \"./pages/Profile\";\nimport LecturerRoute from \"./components/LecturerRoute\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home/>\n                    </Route>\n                    <AuthRoute exact path=\"/profile\">\n                        <Profile/>\n                    </AuthRoute>\n                    <LecturerRoute exact path={\"/course/manage\"}>\n                        <div>\n                            Lec manage courses\n                        </div>\n                    </LecturerRoute>\n                    <Route path=\"*\">\n                        <NotFound/>\n                    </Route>\n                </Switch>\n            </Router>\n        </Provider>\n    );\n}\n\nstore.subscribe(App)\n\nexport default App;\n",["66","67"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/NotFound.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js",["68"],"import React, {useState} from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport {fade, makeStyles} from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport Collapse from '@material-ui/core/Collapse'\nimport ListItemText from '@material-ui/core/ListItemText';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconExpandLess from '@material-ui/icons/ExpandLess'\nimport IconExpandMore from '@material-ui/icons/ExpandMore'\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {authenSlice, signin, signout} from \"../store/authen\";\nimport store from \"../store\";\nimport {connect} from \"react-redux\";\nimport SignUpDialog from \"./SignUpDialog\";\nimport SignInDialog from \"./SignInDialog\";\nimport {Menu, MenuItem} from \"@material-ui/core\";\nimport {AccountCircle} from \"@material-ui/icons\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        zIndex: 2,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        zIndex: 1,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    content: {\n        flexGrow: 1,\n        marginTop: '70px',\n        display: 'flex'\n    },\n    pageContent: {\n        //flexGrow: 1,\n        width:`calc(100vw - ${drawerWidth}px - 20px )`,\n        padding: '20px'\n    },\n    btn: {\n        marginLeft: '10px',\n    },\n    // necessary for content to be below app bar\n    toolbar: theme.mixins.toolbar,\n}));\n\n\nconst PageFrame = ({token, categories, children}) => {\n    const classes = useStyles();\n    const isOpenArray = categories.map((cat, index) => {\n        return false\n    })\n\n    const [itemOpen, setItemOpen] = useState(isOpenArray);\n    const [signUpDialogOpen, setSignUpDialogOpen] = useState(false);\n    const [signInDialogOpen, setSignInDialogOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n\n    const history = useHistory();\n\n    const toggleItem = (index, open) => {\n        const itemOpenCopy = [...itemOpen]\n        itemOpenCopy[index] = open\n        setItemOpen(itemOpenCopy)\n    }\n\n    const closeMenu = () => {\n        setAnchorEl(null)\n    }\n\n    const closeAndNav = (path) => {\n        setAnchorEl(null)\n        history.push(`/${path}`)\n    }\n\n    const navCat = (path) => {\n        history.push(`/cat/${path}`)\n    }\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline/>\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h4\" noWrap>\n                        Ourdemy\n                    </Typography>\n                    <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon/>\n                        </div>\n                        <InputBase\n                            placeholder=\"Search…\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{'aria-label': 'search'}}\n                        />\n                    </div>\n                    {!token ? <div>\n                        <Button className={classes.btn}\n                                onClick={() => setSignInDialogOpen(true)}\n                                color=\"inherit\">Log In</Button>\n                        <Button className={classes.btn}\n                                color=\"inherit\" onClick={() => setSignUpDialogOpen(true)}>Sign Up</Button>\n                    </div> : <div>\n                        <IconButton className={classes.btn} aria-controls=\"simple-menu\" aria-haspopup=\"true\"\n                                    color=\"inherit\" onClick={(e) => setAnchorEl(e.currentTarget)}>\n                            <AccountCircle/>\n                        </IconButton>\n                    </div>}\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"left\"\n            >\n                <div className={classes.toolbar}/>\n                <Divider/>\n                <List>\n                    {categories.map((cat, index) => (\n                        <div key={cat.cid}>\n                            <ListItem button>\n                                <ListItemText primary={cat.cat_name} onClick={() => navCat(cat.cat_name)}/>\n                                <div role=\"button\" onClick={(e) => toggleItem(index, !itemOpen[index])}>\n                                    {itemOpen[index] ? <IconExpandLess/> :\n                                        <IconExpandMore/>}\n                                </div>\n                            </ListItem>\n                            {\n                                cat.subcats ?\n                                    <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\n                                        <Divider/>\n                                        <List component=\"div\" disablePadding>\n                                            {cat.subcats.map((sub, index) => (\n                                                <ListItem button key={sub.scid}>\n                                                    <ListItemText inset\n                                                                  onClick={() => navCat(`${cat.cat_name}/${sub.subcat_name}`)}\n                                                                  primary={sub.subcat_name}/>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Collapse>\n                                    : null\n                            }\n                        </div>\n                    ))}\n                </List>\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.pageContent}>\n                    {children}\n                </div>\n            </main>\n            <SignUpDialog open={signUpDialogOpen} onClose={() => {\n                setSignUpDialogOpen(false)\n                store.dispatch(authenSlice.actions.resetSignUpState())\n            }}/>\n            <SignInDialog open={signInDialogOpen} onClose={() => {\n                setSignInDialogOpen(false)\n                store.dispatch(authenSlice.actions.resetSignInState())\n            }}/>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={closeMenu}\n            >\n                <MenuItem onClick={() => closeAndNav('profile')}>Profile</MenuItem>\n                <MenuItem onClick={() => {\n                    closeMenu()\n                    store.dispatch(signout())\n                }}>Logout</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    token: state.authen.token,\n    categories: state.cat.category\n})\n\nexport default connect(\n    mapStateToProps\n)(PageFrame);","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js",["69"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\n    const classes = useStyles();\n    const nameRef = useRef(\"\")\n    const unameRef = useRef(\"\")\n    const emailRef = useRef(\"\")\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const otpunameRef = useRef(\"\")\n    const otpRef = useRef(\"\")\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogActions>\n                            <Button onClick={() => onClose()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> : !otp ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Full name\"\n                                type=\"text\"\n                                inputRef={nameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={unameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"email\"\n                                label=\"Email\"\n                                type=\"email\"\n                                inputRef={emailRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\n                                    Otp\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            signup({\n                                                \"name\": nameRef.current.value,\n                                                \"username\": unameRef.current.value,\n                                                \"email\": emailRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Sign up\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    OTP\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={otpunameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"otp\"\n                                type=\"text\"\n                                inputRef={otpRef}\n                                fullWidth\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            {!otploading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\n                                        color=\"primary\">\n                                    Switch to Sign up\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            otpConfirm({\n                                                \"username\": otpunameRef.current.value,\n                                                \"otp\": otpRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Confirm\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nSignUpDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    otp: false,\n    otploading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signUpErr,\n    loading: state.authen.signingUp,\n    otp: state.authen.shouldOtp,\n    otploading: state.authen.otping,\n    finish: state.authen.signingUpFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignUpDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js",["70","71","72","73"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { red } from \"@material-ui/core/colors\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport ShareIcon from \"@material-ui/icons/Share\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 350,\n    minWidth: 250,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n}));\n\nexport default function ComplexCard(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={props.className}>\n      <Paper elevation={2}>\n        <Card className={classes.root}>\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {props.avatar ?? \"R\"}\n              </Avatar>\n            }\n            action={\n              <IconButton aria-label=\"settings\">\n                <MoreVertIcon />\n              </IconButton>\n            }\n            title={props.title ?? \"The Course Name\"}\n          />\n          <CardMedia\n            className={classes.media}\n            image={props.imagesrc ?? \"https://picsum.photos/300/300\"}\n            title={props.title}\n          />\n          <CardContent>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              {props.detail ?? \"Brief Details.\"}\n            </Typography>\n          </CardContent>\n          <CardActions disableSpacing>\n            <IconButton aria-label=\"add to favorites\">\n              <FavoriteIcon />\n            </IconButton>\n          </CardActions>\n        </Card>\n      </Paper>\n    </div>\n  );\n}\n","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js",["74"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js",["75","76"],"import axios from 'axios';\nimport {\n    createSlice,\n    createAsyncThunk,\n} from '@reduxjs/toolkit';\nimport {signin} from \"../authen\";\nimport {act} from \"@testing-library/react\";\n\nconst initialState = {\n    category: [],\n    error: null\n}\n\nexport const fetchCategories = createAsyncThunk(\n    'category/fetchCategories',\n    async (_, thunkAPI) => {\n        const state = thunkAPI.getState()\n        if (state.cat.category.length === 0) {\n            const res = await axios.get(`${process.env.REACT_APP_BACKEND_URL}/category/all`)\n            return res.data\n        }\n        else {\n            return state.category\n        }\n    }\n)\n\nexport const catSlice = createSlice({\n    name: 'category',\n    initialState: initialState,\n    reducers: {\n\n    },\n    extraReducers: {\n        [fetchCategories.fulfilled]: (state, action) => {\n            state.category = action.payload\n        },\n        [fetchCategories.rejected]: (state, action) => {\n            state.error = action.error\n        }\n    }\n})","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js",["77"],"import {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport store from \"../store\";\nimport {authenSlice, signin, signup} from \"../store/authen\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport React, {useRef} from \"react\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignInDialog = ({open, onClose, err, loading, finish}) => {\n    const classes = useStyles();\n\n    const unameRef = useRef(\"\");\n    const passRef = useRef(\"\");\n\n    return (\n        finish ? <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Sign in finished\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogActions>\n                    <Button onClick={() => onClose()} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog> :\n        <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Sign In\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <DialogContent>\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"username\"\n                    label=\"username\"\n                    type=\"text\"\n                    inputRef={unameRef}\n                    fullWidth\n                />\n                <TextField\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"password\"\n                    label=\"Password\"\n                    type=\"password\"\n                    inputRef={passRef}\n                    fullWidth\n                />\n                {err ? <DialogContentText>\n                    <Typography color='error' component={'span'}>\n                        {err}\n                    </Typography>\n                </DialogContentText> : null}\n            </DialogContent>\n            <DialogActions>\n                {!loading ? <div>\n                    <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"secondary\">\n                        Reset Password\n                    </Button>\n                    <Button onClick={() => onClose()} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={\n                            () => store.dispatch(\n                                signin({\n                                    \"username\": unameRef.current.value,\n                                    \"password\": passRef.current.value,\n                                })\n                            )\n                        }\n                        color=\"primary\">\n                        Sign In\n                    </Button>\n                </div> : <div>\n                    <CircularProgress/>\n                </div>}\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signInErr,\n    loading: state.authen.signingIn,\n    finish: state.authen.signingInFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignInDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/reportWebVitals.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js",[],{"ruleId":"78","severity":1,"message":"79","line":6,"column":5,"nodeType":"80","messageId":"81","endLine":6,"endColumn":9},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"78","severity":1,"message":"86","line":21,"column":22,"nodeType":"80","messageId":"81","endLine":21,"endColumn":28},{"ruleId":"78","severity":1,"message":"87","line":8,"column":8,"nodeType":"80","messageId":"81","endLine":8,"endColumn":19},{"ruleId":"78","severity":1,"message":"88","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":12},{"ruleId":"78","severity":1,"message":"89","line":9,"column":8,"nodeType":"80","messageId":"81","endLine":9,"endColumn":16},{"ruleId":"78","severity":1,"message":"90","line":15,"column":8,"nodeType":"80","messageId":"81","endLine":15,"endColumn":17},{"ruleId":"78","severity":1,"message":"91","line":16,"column":8,"nodeType":"80","messageId":"81","endLine":16,"endColumn":22},{"ruleId":"78","severity":1,"message":"92","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":23},{"ruleId":"78","severity":1,"message":"86","line":6,"column":9,"nodeType":"80","messageId":"81","endLine":6,"endColumn":15},{"ruleId":"78","severity":1,"message":"93","line":7,"column":9,"nodeType":"80","messageId":"81","endLine":7,"endColumn":12},{"ruleId":"78","severity":1,"message":"94","line":10,"column":30,"nodeType":"80","messageId":"81","endLine":10,"endColumn":36},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'signin' is defined but never used.","'DialogTitle' is defined but never used.","'clsx' is defined but never used.","'Collapse' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'reportWebVitals' is defined but never used.","'act' is defined but never used.","'signup' is defined but never used.","no-global-assign","no-unsafe-negation"]