[{"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/reportWebVitals.js":"1","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/authen/index.js":"2","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/CreateCourse.js":"3","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/ViewVideo.js":"4","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js":"5","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js":"6","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/UpdatePassword.js":"7","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CreateChapterDialog.js":"8","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js":"9","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js":"10","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js":"11","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js":"12","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/UpdateCourse.js":"13","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js":"14","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js":"15","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js":"16","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js":"17","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/AuthRoute.js":"18","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/UploadVideoDialog.js":"19","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js":"20","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/CourseManage.js":"21","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js":"22","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/detail.js":"23","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/course/lec/index.js":"24"},{"size":409,"mtime":1609677454526,"results":"25","hashOfConfig":"26"},{"size":10269,"mtime":1609878123297,"results":"27","hashOfConfig":"26"},{"size":9160,"mtime":1609949598078,"results":"28","hashOfConfig":"26"},{"size":5445,"mtime":1609878123297,"results":"29","hashOfConfig":"26"},{"size":622,"mtime":1609878123294,"results":"30","hashOfConfig":"26"},{"size":4237,"mtime":1609962800107,"results":"31","hashOfConfig":"32"},{"size":5876,"mtime":1609878123295,"results":"33","hashOfConfig":"26"},{"size":1720,"mtime":1609923638439,"results":"34","hashOfConfig":"26"},{"size":9449,"mtime":1609677454524,"results":"35","hashOfConfig":"26"},{"size":682,"mtime":1609878123295,"results":"36","hashOfConfig":"26"},{"size":959,"mtime":1609878123298,"results":"37","hashOfConfig":"26"},{"size":2431,"mtime":1609878305565,"results":"38","hashOfConfig":"26"},{"size":7982,"mtime":1609923638441,"results":"39","hashOfConfig":"26"},{"size":1495,"mtime":1609878305564,"results":"40","hashOfConfig":"26"},{"size":1381,"mtime":1609878123295,"results":"41","hashOfConfig":"26"},{"size":4214,"mtime":1609878123294,"results":"42","hashOfConfig":"26"},{"size":1855,"mtime":1609926145079,"results":"43","hashOfConfig":"26"},{"size":543,"mtime":1609677454523,"results":"44","hashOfConfig":"26"},{"size":3928,"mtime":1609923638439,"results":"45","hashOfConfig":"26"},{"size":13692,"mtime":1609878123296,"results":"46","hashOfConfig":"26"},{"size":5700,"mtime":1609923638440,"results":"47","hashOfConfig":"26"},{"size":9219,"mtime":1609878123294,"results":"48","hashOfConfig":"26"},{"size":6666,"mtime":1609965670385,"results":"49","hashOfConfig":"32"},{"size":5792,"mtime":1609949598079,"results":"50","hashOfConfig":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j4d77n",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1415a0s",{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/reportWebVitals.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/authen/index.js",[],["111","112"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/CreateCourse.js",["113","114"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/ViewVideo.js",["115"],"import React, {useState} from \"react\";\nimport {Grid, makeStyles} from \"@material-ui/core\";\nimport PageFrame from \"../components/PageFrame\";\nimport ReactPlayer from \"react-player\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport IconExpandLess from '@material-ui/icons/ExpandLess'\nimport IconExpandMore from '@material-ui/icons/ExpandMore'\nimport Collapse from '@material-ui/core/Collapse'\nimport Divider from \"@material-ui/core/Divider\";\nimport {useHistory} from \"react-router-dom\";\nimport {useParams} from \"react-router\"\n\nconst useStyle = makeStyles((theme) => {\n\n})\n\nconst ViewVideo = ({courseContents}) => {\n    const classes = useStyle()\n    const isOpenArray = courseContents.map((chapter, index) => {\n        return false\n    })\n\n    const [itemOpen, setItemOpen] = useState(isOpenArray);\n\n    const history = useHistory();\n\n    const toggleItem = (index, open) => {\n        const itemOpenCopy = [...itemOpen]\n        itemOpenCopy[index] = open\n        setItemOpen(itemOpenCopy)\n    }\n\n    const navChapter = (vid) => {\n        history.push(`/course/view/${vid}`)\n    }\n\n    const { vid } = useParams()\n    console.log(vid)\n\n    return (\n        <div>\n            <PageFrame>\n                <Grid container spacing={3}>\n                    <Grid item xs={9}>\n                        <h2>{ vid }</h2>\n                        <ReactPlayer url='https://www.youtube.com/watch?v=AmJv8yx57dM' width={'100%'} height={'80vh'}/>\n\n                    </Grid>\n                    <Grid item xs={3}>\n                        <List>\n                            {\n                                courseContents.map((chapter, index) => (\n                                    <div key={chapter.ccid}>\n                                        <ListItem button onClick={(e) => toggleItem(index, !itemOpen[index])}>\n                                            <ListItemText primary={chapter.name}/>\n                                            <div role=\"button\" >\n                                                {itemOpen[index] ? <IconExpandLess/> :\n                                                <IconExpandMore/>}\n                                            </div>\n                                        </ListItem>\n                                        {\n                                            chapter.video ?\n                                                <Collapse in={itemOpen[index]} timeout=\"auto\" unmountOnExit>\n                                                    <Divider/>\n                                                    <List component=\"div\" disablePadding>\n                                                        {chapter.video.map((video, index) => (\n                                                            <ListItem button key={video.vid}>\n                                                                <ListItemText inset\n                                                                              onClick={() => navChapter(video.vid)}\n                                                                              primary={video.title}/>\n                                                            </ListItem>\n                                                        ))}\n                                                    </List>\n                                                </Collapse>\n                                                :null\n                                        }\n                                    </div>\n                                ))\n                            }\n                        </List>\n                    </Grid>\n                </Grid>\n            </PageFrame>\n        </div>\n    )\n}\n\nViewVideo.defaultProps = {\n    courseContents: [\n        {\n            \"ccid\": \"ab1\",\n            \"name\": \"How to use Venti\",\n            \"video\": [\n                {\n                    \"vid\": \"v01\",\n                    \"title\": \"Getting Started\",\n                    \"url\": \"https://www.youtube.com/watch?v=uNT_AxXrUGs\"\n                },\n                {\n                    \"vid\": \"v02\",\n                    \"title\": \"Basic\",\n                    \"url\": \"https://www.youtube.com/watch?v=WxiYbLw55cE\"\n                },\n                {\n                    \"vid\": \"v03\",\n                    \"title\": \"Advance\",\n                    \"url\": \"https://www.youtube.com/watch?v=4oa8tKm04wE\"\n                }\n            ]\n        },\n        {\n            \"ccid\": \"ab2\",\n            \"name\": \"How to use Klee\",\n            \"video\": [\n                {\n                    \"vid\": \"v11\",\n                    \"title\": \"Getting Started\"\n                },\n                {\n                    \"vid\": \"v12\",\n                    \"title\": \"Basic\"\n                },\n                {\n                    \"vid\": \"v13\",\n                    \"title\": \"Advance\"\n                }\n            ]\n        },\n        {\n            \"ccid\": \"ab3\",\n            \"name\": \"How to use Childe\",\n            \"video\": [\n                {\n                    \"vid\": \"v21\",\n                    \"title\": \"Getting Started\"\n                },\n                {\n                    \"vid\": \"v22\",\n                    \"title\": \"Basic\"\n                },\n                {\n                    \"vid\": \"v23\",\n                    \"title\": \"Advance\"\n                }\n            ]\n        }\n    ]\n}\n\nexport default ViewVideo",["116","117"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/LecturerRoute.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/ComplexCard.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/UpdatePassword.js",["118","119","120"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup, updatePassword} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst UpdatePasswordDialog = ({open, onClose, err, loading, finish}) => {\n    const classes = useStyles();\n\n    const opassRef = useRef(\"\");\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const cleanState = () => {\n        store.dispatch(authenSlice.actions.resetPasswordUpdateState())\n        onClose()\n    }\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Update password finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <DialogContentText>\n                                Update password successfully\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={() => cleanState()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> :\n                    <Dialog open={open} onClose={() => cleanState()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Update Password\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Old password\"\n                                type=\"password\"\n                                inputRef={opassRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"npassword\"\n                                label=\"New password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => cleanState()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            updatePassword({\n                                                \"oldPassword\": opassRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Update Password\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nUpdatePasswordDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.passwordErr,\n    loading: state.authen.updatingPassword,\n    finish: state.authen.updatingPasswordFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(UpdatePasswordDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CreateChapterDialog.js",["121"],"import React, {useRef} from \"react\";\nimport {\n    AppBar, Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    makeStyles,\n    TextField\n} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst CreateChapterDialog = ({open, onClose}) => {\n    const classes = useStyles()\n\n    const nameRef = useRef('');\n\n    return (\n        <>\n            <Dialog open={open} onClose={() => onClose()}>\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Create new chapter\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogContent>\n                    <TextField\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"Chapter name\"\n                        type=\"text\"\n                        inputRef={nameRef}\n                        fullWidth\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => onClose()} variant={\"contained\"} color={\"secondary\"}>\n                        Cancel\n                    </Button>\n                    <Button variant={\"contained\"} color={\"primary\"}>\n                        Create\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n\n}\n\nexport default CreateChapterDialog",["122","123"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignUpDialog.js",["124"],"import React, {useRef} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport store from \"../store\";\nimport {authenSlice, otpConfirm, signup} from \"../store/authen\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignUpDialog = ({open, onClose, err, loading, otp, otploading, finish}) => {\n    const classes = useStyles();\n    const nameRef = useRef(\"\")\n    const unameRef = useRef(\"\")\n    const emailRef = useRef(\"\")\n    const passRef = useRef(\"\")\n    const rpassRef = useRef(\"\")\n\n    const otpunameRef = useRef(\"\")\n    const otpRef = useRef(\"\")\n\n    return (\n        <div>\n            {\n                finish ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up finished\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogActions>\n                            <Button onClick={() => onClose()} color=\"primary\">\n                                Ok\n                            </Button>\n                        </DialogActions>\n                    </Dialog> : !otp ?\n                    <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    Sign up\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"name\"\n                                label=\"Full name\"\n                                type=\"text\"\n                                inputRef={nameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={unameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"email\"\n                                label=\"Email\"\n                                type=\"email\"\n                                inputRef={emailRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                inputRef={passRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"rpassword\"\n                                label=\"Repeat Password\"\n                                type=\"password\"\n                                inputRef={rpassRef}\n                                fullWidth\n                            />\n                            {err ? <DialogContentText>\n                                <Typography color='error' component={'span'}>\n                                    {err}\n                                </Typography>\n                            </DialogContentText> : null}\n                        </DialogContent>\n                        <DialogActions>\n                            {!loading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.otpMode())} color=\"primary\">\n                                    Otp\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            signup({\n                                                \"name\": nameRef.current.value,\n                                                \"username\": unameRef.current.value,\n                                                \"email\": emailRef.current.value,\n                                                \"password\": passRef.current.value,\n                                                \"repeatPassword\": rpassRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Sign up\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n                    : <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                        <AppBar className={classes.appBar}>\n                            <Toolbar>\n                                <Typography variant=\"h6\" className={classes.title}>\n                                    OTP\n                                </Typography>\n                            </Toolbar>\n                        </AppBar>\n                        <DialogContent>\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"username\"\n                                type=\"text\"\n                                inputRef={otpunameRef}\n                                fullWidth\n                            />\n                            <TextField\n                                autoFocus\n                                margin=\"dense\"\n                                id=\"username\"\n                                label=\"otp\"\n                                type=\"text\"\n                                inputRef={otpRef}\n                                fullWidth\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            {!otploading ? <div>\n                                <Button onClick={() => store.dispatch(authenSlice.actions.signupMode())}\n                                        color=\"primary\">\n                                    Switch to Sign up\n                                </Button>\n                                <Button onClick={() => onClose()} color=\"primary\">\n                                    Cancel\n                                </Button>\n                                <Button\n                                    onClick={\n                                        () => store.dispatch(\n                                            otpConfirm({\n                                                \"username\": otpunameRef.current.value,\n                                                \"otp\": otpRef.current.value,\n                                            })\n                                        )\n                                    }\n                                    color=\"primary\">\n                                    Confirm\n                                </Button>\n                            </div> : <div>\n                                <CircularProgress/>\n                            </div>}\n                        </DialogActions>\n                    </Dialog>\n            }\n        </div>\n    );\n}\n\nSignUpDialog.defaultProps = {\n    open: false,\n    err: null,\n    loading: false,\n    otp: false,\n    otploading: false,\n    finish: false\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signUpErr,\n    loading: state.authen.signingUp,\n    otp: state.authen.shouldOtp,\n    otploading: state.authen.otping,\n    finish: state.authen.signingUpFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignUpDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/index.js",["125","126","127"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/category/index.js",["128"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/home.js",["129"],"import React from \"react\";\nimport \"../pages/home.css\";\n\nimport \"react-multi-carousel/lib/styles.css\";\nimport { Paper } from \"@material-ui/core\";\nimport ComplexCard from \"../components/ComplexCard\";\nimport CCarousel from \"../components/CCarousel\";\nimport PageFrame from \"../components/PageFrame\";\n\nconst dummyHigh = [\n  {\n    src: \"https://picsum.photos/300/200\",\n    title: \"Java Code Giấy\",\n    kind: \"Web Devevlopment\",\n    author: \"Ba Tê\",\n    rate: 5,\n    count: \"700\",\n    currentPrice: \"50\",\n    originPrice: \"70\",\n    brief: \"Java code giay\",\n  },\n  {\n    src: \"https://picsum.photos/300/200\",\n    title: \"Java Code Giấy\",\n    kind: \"Web Devevlopment\",\n    author: \"Ba Tê\",\n    rate: 1,\n    count: \"700\",\n    currentPrice: \"1\",\n    originPrice: \"70\",\n    brief: \"Java code giay\",\n  },\n  {\n    src: \"https://picsum.photos/300/200\",\n    title: \"Java Code Giấy\",\n    kind: \"Web Devevlopment\",\n    author: \"Ba Tê\",\n    rate: 2,\n    count: \"700\",\n    currentPrice: \"1\",\n    originPrice: \"70\",\n    brief: \"Java code giay\",\n  },\n  {\n    src: \"https://picsum.photos/300/200\",\n    title: \"Java Code Giấy\",\n    kind: \"Web Devevlopment\",\n    author: \"Ba Tê\",\n    rate: 5,\n    count: \"1\",\n    currentPrice: \"0\",\n    originPrice: \"70\",\n    brief: \"Java code giay\",\n  },\n  {\n    src: \"https://picsum.photos/300/200\",\n    title: \"Java Code Giấy\",\n    kind: \"Web Devevlopment\",\n    author: \"Ba Tê\",\n    rate: 4.5,\n    count: \"1\",\n    currentPrice: \"0\",\n    originPrice: \"70\",\n    brief: \"Java code giay\",\n  },\n].map((val, index) => (\n  <ComplexCard\n    key={index}\n    className=\"item\"\n    title={val.title}\n    price={val.currentPrice}\n    originPrice={val.originPrice}\n    kind={val.kind}\n    rate={val.rate}\n    count={val.count}\n    author={val.author}\n    imagesrc={val.src}\n    \n  />\n));\n\nconst Home = () => {\n  return (\n    <PageFrame>\n      <div className=\"title\">\n        <h2>Highlights </h2>\n        <CCarousel itemClassName=\"item\">{dummyHigh}</CCarousel>\n      </div>\n      <div className=\"title\">\n        <h2>Most Watches</h2>\n        <CCarousel itemClassName=\"item\">{dummyHigh}</CCarousel>\n      </div>\n      <div className=\"title\">\n        <h2>Newest</h2>\n        <CCarousel itemClassName=\"item\">{dummyHigh}</CCarousel>\n      </div>\n      <div className=\"title\">\n        <h2>Topics</h2>\n        <CCarousel itemClassName=\"item\">{dummyHigh}</CCarousel>\n      </div>\n    </PageFrame>\n  );\n};\n\nexport default Home;\n","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/UpdateCourse.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/CCarousel.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/YesNoDialog.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/SignInDialog.js",["130","131"],"import {AppBar, CircularProgress, makeStyles} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport store from \"../store\";\nimport {authenSlice, signin, signup} from \"../store/authen\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport React, {useRef} from \"react\";\nimport {connect} from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        flex: 1,\n    },\n}));\n\nconst SignInDialog = ({open, onClose, err, loading, finish}) => {\n    const classes = useStyles();\n\n    const unameRef = useRef(\"\");\n    const passRef = useRef(\"\");\n\n    return (\n        finish ? <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Sign in finished\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogActions>\n                    <Button onClick={() => onClose()} color=\"primary\">\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog> :\n            <Dialog open={open} onClose={() => onClose()} aria-labelledby=\"form-dialog-title\">\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Sign In\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogContent>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"username\"\n                        label=\"username\"\n                        type=\"text\"\n                        inputRef={unameRef}\n                        fullWidth\n                    />\n                    <TextField\n                        margin=\"dense\"\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        inputRef={passRef}\n                        fullWidth\n                    />\n                    {err ? <DialogContentText>\n                        <Typography color='error' component={'span'}>\n                            {err}\n                        </Typography>\n                    </DialogContentText> : null}\n                </DialogContent>\n                <DialogActions>\n                    {!loading ? <div>\n                        <Button onClick={() => {\n                        }} color=\"secondary\">\n                            Reset Password\n                        </Button>\n                        <Button onClick={() => onClose()} color=\"primary\">\n                            Cancel\n                        </Button>\n                        <Button\n                            onClick={\n                                () => store.dispatch(\n                                    signin({\n                                        \"username\": unameRef.current.value,\n                                        \"password\": passRef.current.value,\n                                    })\n                                )\n                            }\n                            color=\"primary\">\n                            Sign In\n                        </Button>\n                    </div> : <div>\n                        <CircularProgress/>\n                    </div>}\n                </DialogActions>\n            </Dialog>\n    );\n}\n\nconst mapStateToProps = state => ({\n    err: state.authen.signInErr,\n    loading: state.authen.signingIn,\n    finish: state.authen.signingInFinish,\n})\n\nexport default connect(\n    mapStateToProps\n)(SignInDialog)","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/App.js",["132","133","134"],"import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n} from \"react-router-dom\";\n\nimport Home from \"./pages/home\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthRoute from \"./components/AuthRoute\";\nimport Profile from \"./pages/Profile\";\nimport LecturerRoute from \"./components/LecturerRoute\";\nimport ViewVideo from \"./pages/ViewVideo\";\nimport CourseManage from \"./pages/CourseManage\";\nimport CreateCourse from \"./pages/CreateCourse\";\nimport UpdateCourse from \"./pages/UpdateCourse\";\nimport CourseContent from \"./pages/CourseContent\";\nimport Detail from \"./pages/detail\"\nimport { fetchCurrentCourse } from \"./store/course/lec\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/detail\">\n            <Detail />\n          </Route>\n          <AuthRoute exact path=\"/profile\">\n            <Profile />\n          </AuthRoute>\n          <LecturerRoute exact path={\"/course/manage\"}>\n            <CourseManage />\n          </LecturerRoute>\n          <Route exact path={\"/course/create\"}>\n            <CreateCourse />\n          </Route>\n          <Route exact path={\"/course/update/:id\"}>\n            <UpdateCourse />\n          </Route>\n          <Route exact path={\"/course/content/:id\"}>\n            <CourseContent />\n          </Route>\n          <Route exact path={\"/course/view\"}>\n            <ViewVideo />\n          </Route>\n          <Route exact path={\"/course/view/:vid\"}>\n            <ViewVideo />\n          </Route>\n          <Route path=\"*\">\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nstore.subscribe(App);\n\nexport default App;\n","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/AuthRoute.js",[],["135","136"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/UploadVideoDialog.js",["137"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/Profile.js",["138","139","140","141","142"],"import React, {useEffect, useRef, useState} from 'react';\n\nimport PageFrame from \"../components/PageFrame\";\nimport {\n    Button, CircularProgress,\n    Divider,\n    Grid, IconButton,\n    Input,\n    List,\n    ListItem, ListItemSecondaryAction,\n    ListItemText,\n    Paper, Snackbar,\n    Typography\n} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Close, Delete} from \"@material-ui/icons\";\nimport YesNoDialog from \"../components/YesNoDialog\";\nimport {useHistory} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {fetchFavList, fetchProfile, updateProfile} from \"../store/authen\";\nimport store from \"../store\";\nimport UpdatePasswordDialog from \"../components/UpdatePassword\";\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: 'block',\n        width: '100%',\n    },\n    buttonBar: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    coursePaper: {\n        marginTop: '8px',\n        marginBottom: '8px',\n        marginRight: '8px'\n    },\n    main: {\n        width: '99%',\n    },\n    loadingCenter: {\n        display: 'flex',\n        justifyContent: 'center'\n    }\n}))\n\nconst Profile = ({user, favList, fetching, favListFetching, err, favErr}) => {\n    const classes = useStyles()\n\n    const [updateMode, setUpdateMode] = useState(false);\n    const [updateDialogOpen, setUpdateDialogOpen] = useState(false);\n    const [updatePasswordDialogOpen, setUpdatePasswordDialogOpen] = useState(false);\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\n\n    useEffect(() => {\n        store.dispatch(fetchProfile())\n    }, [])\n\n    const unameRef = useRef(\"\")\n    const nameRef = useRef(\"\")\n    const emailRef = useRef(\"\")\n    const history = useHistory();\n\n    const resetFieldsUpdate = () => {\n        unameRef.current.value = user.username\n        nameRef.current.value = user.fullname\n        emailRef.current.value = user.email\n    }\n\n    return (\n        <div className={classes.root}>\n            <PageFrame>\n                <div className={classes.main}>\n                    <Grid container spacing={3}>\n                        <Grid item xs={6}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Typography variant={\"h6\"} align={\"center\"} color={\"primary\"}>\n                                        Profile\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Divider/>\n                                </Grid>\n                                {\n                                    err ?\n                                        <Grid item xs={12}>\n                                            <Typography align={\"center\"} color={\"error\"}>\n                                                {err}\n                                            </Typography>\n                                        </Grid> : null\n                                }\n                                {\n                                    !fetching ? <>\n                                        <Grid item xs={6}>\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\n                                                Username\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Input inputRef={unameRef} defaultValue={user.username}\n                                                   disabled/>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\n                                                Fullname\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Input inputRef={nameRef} defaultValue={user.fullname}\n                                                   disabled={!updateMode}/>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography variant={\"h6\"} align={\"right\"} color={\"textSecondary\"}>\n                                                Email\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Input inputRef={emailRef} defaultValue={user.email}\n                                                   disabled={!updateMode}/>\n                                        </Grid>\n                                        {\n                                            updateMode && !user.isLec ? <Grid item xs={12}>\n                                                <div className={classes.buttonBar}>\n                                                    <Button variant={\"outlined\"} color={\"secondary\"}>\n                                                        Upgrade to Lecturer\n                                                    </Button>\n                                                </div>\n                                            </Grid> : null\n                                        }\n                                        {\n                                            !updateMode && user.isLec ? <Grid item xs={12}>\n                                                <div className={classes.buttonBar}>\n                                                    <Button variant={\"outlined\"} color={\"primary\"}\n                                                            onClick={() => history.push(\"/course/manage\")}>\n                                                        Manage Courses\n                                                    </Button>\n                                                </div>\n                                            </Grid> : null\n                                        }\n                                        <Grid item xs={12}>\n                                            <div className={classes.buttonBar}>\n                                                {updateMode ? <div>\n                                                    <Button variant={\"contained\"} color={\"secondary\"}\n                                                            style={{marginRight: \"5px\"}}\n                                                            onClick={() => {\n                                                                setUpdateMode(false)\n                                                                resetFieldsUpdate()\n                                                            }\n                                                            }>\n                                                        Cancel\n                                                    </Button>\n                                                    <Button variant={\"contained\"} color={\"primary\"}\n                                                            onClick={() => setUpdateDialogOpen(true)}>\n                                                        Submit\n                                                    </Button>\n                                                </div> : <>\n                                                    <Button style={{marginRight: \"5px\"}} variant={\"contained\"}\n                                                            color={\"secondary\"}\n                                                            onClick={() => setUpdatePasswordDialogOpen(true)}\n                                                    >\n                                                        Update Password\n                                                    </Button>\n                                                    <Button variant={\"contained\"} color={\"primary\"}\n                                                            onClick={() => setUpdateMode(true)}>\n                                                        Update\n                                                    </Button>\n                                                </>}\n                                            </div>\n                                        </Grid>\n                                    </> : <>\n                                        {\n                                            !err ? <Grid item xs={12}>\n                                                <div className={classes.loadingCenter}>\n                                                    <CircularProgress/>\n                                                </div>\n                                            </Grid> : null\n                                        }\n                                    </>\n                                }\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <Typography variant={\"h6\"} align={\"center\"} color={\"primary\"}>\n                                        Favorite Courses\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Divider/>\n                                </Grid>\n                            </Grid>\n                            {\n                                favListFetching ? <></> : <>\n                                    {\n                                        !favErr ? <Grid item xs={12}>\n                                                <div style={{maxHeight: '80vh', overflow: 'auto'}}>\n                                                    <List>\n                                                        {\n                                                            favList.map((fav) => (\n                                                                <Paper variant={\"outlined\"} className={classes.coursePaper}\n                                                                       key={fav.cid}\n                                                                       elevation={1}>\n                                                                    <ListItem>\n                                                                        <ListItemText>\n                                                                            {fav.name}\n                                                                        </ListItemText>\n                                                                        <ListItemSecondaryAction>\n                                                                            <IconButton edge=\"end\" aria-label=\"comments\">\n                                                                                <Delete/>\n                                                                            </IconButton>\n                                                                        </ListItemSecondaryAction>\n                                                                    </ListItem>\n                                                                </Paper>\n                                                            ))\n                                                        }\n                                                    </List>\n                                                </div>\n                                            </Grid> :\n                                            <Grid item xs={12}>\n                                                <Typography align={\"center\"} color={\"error\"}>\n                                                    {favErr}\n                                                </Typography>\n                                            </Grid>\n\n                                    }\n                                </>\n\n                            }\n                        </Grid>\n                    </Grid>\n                </div>\n            </PageFrame>\n            <YesNoDialog open={updateDialogOpen} onClose={() => setUpdateDialogOpen(false)} title={\"Update\"}\n                         content={\"Are you sure you want to update your information? Ò w Ó\"}\n                         onConfirm={() => {\n                             store.dispatch(updateProfile({\n                                 \"fullname\": nameRef.current.value,\n                                 \"email\": emailRef.current.value\n                             }))\n                             setUpdateDialogOpen(false)\n                         }\n\n                         }\n                         onCancel={() => setUpdateDialogOpen(false)}\n            />\n            <UpdatePasswordDialog open={updatePasswordDialogOpen} onClose={() => setUpdatePasswordDialogOpen(false)}\n            />\n        </div>\n    );\n}\n\nProfile.defaultProps = {\n    user: {\n        \"username\": \"\",\n        \"fullname\": \"\",\n        \"password\": \"\",\n        \"email\": \"\",\n        \"isLec\": false\n    },\n    favList: [],\n    err: null\n}\n\nconst mapStateToProps = state => ({\n    user: state.authen.user,\n    favList: state.authen.favList,\n    err: state.authen.updateErr,\n    fetching: state.authen.fetching,\n    favListFetching: state.authen.fetchingFav,\n    favErr: state.authen.favListErr\n})\n\nexport default connect(\n    mapStateToProps\n)(Profile);","/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/CourseManage.js",["143","144","145","146","147","148"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/components/PageFrame.js",["149"],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/pages/detail.js",[],"/Users/dilvika/Documents/Projects/HCMUS/AWeb/Ourdemy/ourdemy_frontend/src/store/course/lec/index.js",["150"],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":7,"column":44,"nodeType":"157","messageId":"158","endLine":7,"endColumn":52},{"ruleId":"155","severity":1,"message":"159","line":64,"column":12,"nodeType":"157","messageId":"158","endLine":64,"endColumn":15},{"ruleId":"155","severity":1,"message":"160","line":20,"column":11,"nodeType":"157","messageId":"158","endLine":20,"endColumn":18},{"ruleId":"151","replacedBy":"161"},{"ruleId":"153","replacedBy":"162"},{"ruleId":"155","severity":1,"message":"163","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":19},{"ruleId":"155","severity":1,"message":"164","line":13,"column":22,"nodeType":"157","messageId":"158","endLine":13,"endColumn":32},{"ruleId":"155","severity":1,"message":"165","line":13,"column":34,"nodeType":"157","messageId":"158","endLine":13,"endColumn":40},{"ruleId":"155","severity":1,"message":"166","line":7,"column":5,"nodeType":"157","messageId":"158","endLine":7,"endColumn":22},{"ruleId":"151","replacedBy":"167"},{"ruleId":"153","replacedBy":"168"},{"ruleId":"155","severity":1,"message":"163","line":8,"column":8,"nodeType":"157","messageId":"158","endLine":8,"endColumn":19},{"ruleId":"155","severity":1,"message":"169","line":5,"column":8,"nodeType":"157","messageId":"158","endLine":5,"endColumn":23},{"ruleId":"155","severity":1,"message":"170","line":8,"column":9,"nodeType":"157","messageId":"158","endLine":8,"endColumn":21},{"ruleId":"155","severity":1,"message":"171","line":9,"column":8,"nodeType":"157","messageId":"158","endLine":9,"endColumn":17},{"ruleId":"155","severity":1,"message":"172","line":6,"column":9,"nodeType":"157","messageId":"158","endLine":6,"endColumn":15},{"ruleId":"155","severity":1,"message":"173","line":5,"column":10,"nodeType":"157","messageId":"158","endLine":5,"endColumn":15},{"ruleId":"155","severity":1,"message":"174","line":10,"column":9,"nodeType":"157","messageId":"158","endLine":10,"endColumn":20},{"ruleId":"155","severity":1,"message":"165","line":10,"column":30,"nodeType":"157","messageId":"158","endLine":10,"endColumn":36},{"ruleId":"155","severity":1,"message":"175","line":6,"column":3,"nodeType":"157","messageId":"158","endLine":6,"endColumn":7},{"ruleId":"155","severity":1,"message":"176","line":7,"column":3,"nodeType":"157","messageId":"158","endLine":7,"endColumn":12},{"ruleId":"155","severity":1,"message":"177","line":23,"column":10,"nodeType":"157","messageId":"158","endLine":23,"endColumn":28},{"ruleId":"151","replacedBy":"178"},{"ruleId":"153","replacedBy":"179"},{"ruleId":"155","severity":1,"message":"166","line":7,"column":5,"nodeType":"157","messageId":"158","endLine":7,"endColumn":22},{"ruleId":"155","severity":1,"message":"180","line":12,"column":12,"nodeType":"157","messageId":"158","endLine":12,"endColumn":20},{"ruleId":"155","severity":1,"message":"181","line":16,"column":9,"nodeType":"157","messageId":"158","endLine":16,"endColumn":14},{"ruleId":"155","severity":1,"message":"182","line":20,"column":9,"nodeType":"157","messageId":"158","endLine":20,"endColumn":21},{"ruleId":"155","severity":1,"message":"183","line":53,"column":12,"nodeType":"157","messageId":"158","endLine":53,"endColumn":24},{"ruleId":"155","severity":1,"message":"184","line":53,"column":26,"nodeType":"157","messageId":"158","endLine":53,"endColumn":41},{"ruleId":"155","severity":1,"message":"185","line":4,"column":8,"nodeType":"157","messageId":"158","endLine":4,"endColumn":13},{"ruleId":"155","severity":1,"message":"186","line":8,"column":11,"nodeType":"157","messageId":"158","endLine":8,"endColumn":22},{"ruleId":"155","severity":1,"message":"187","line":11,"column":16,"nodeType":"157","messageId":"158","endLine":11,"endColumn":24},{"ruleId":"155","severity":1,"message":"188","line":13,"column":5,"nodeType":"157","messageId":"158","endLine":13,"endColumn":8},{"ruleId":"155","severity":1,"message":"173","line":16,"column":5,"nodeType":"157","messageId":"158","endLine":16,"endColumn":10},{"ruleId":"155","severity":1,"message":"189","line":19,"column":9,"nodeType":"157","messageId":"158","endLine":19,"endColumn":12},{"ruleId":"155","severity":1,"message":"172","line":21,"column":22,"nodeType":"157","messageId":"158","endLine":21,"endColumn":28},{"ruleId":"155","severity":1,"message":"190","line":1,"column":8,"nodeType":"157","messageId":"158","endLine":1,"endColumn":13},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'MenuItem' is defined but never used.","Identifier","unusedVar","'ava' is assigned a value but never used.","'classes' is assigned a value but never used.",["191"],["192"],"'DialogTitle' is defined but never used.","'otpConfirm' is defined but never used.","'signup' is defined but never used.","'DialogContentText' is defined but never used.",["191"],["192"],"'reportWebVitals' is defined but never used.","'initialState' is defined but never used.","'jwtDecode' is defined but never used.","'signin' is defined but never used.","'Paper' is defined but never used.","'authenSlice' is defined but never used.","'Link' is defined but never used.","'useParams' is defined but never used.","'fetchCurrentCourse' is defined but never used.",["191"],["192"],"'Snackbar' is defined but never used.","'Close' is defined but never used.","'fetchFavList' is defined but never used.","'snackbarOpen' is assigned a value but never used.","'setSnackbarOpen' is assigned a value but never used.","'store' is defined but never used.","'CardActions' is defined but never used.","'Checkbox' is defined but never used.","'Fab' is defined but never used.","'Add' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]